{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/render/App.vue?8403","webpack:///./src/render/Game.vue?4002","webpack:///./src/render/Render.vue?e5ec","webpack:///./src/render/Render.vue","webpack:///./src/render/Render.vue?0e80","webpack:///./src/render/Render.vue?8e02","webpack:///./src/particles/counters/ZeroCounter.ts","webpack:///./src/particles/emitters/Emitter.ts","webpack:///./src/particles/actions/Action.ts","webpack:///./src/particles/actions/Move.ts","webpack:///./src/particles/actions/DeathZone.ts","webpack:///./src/particles/actions/TurnTowardsPoint.ts","webpack:///./src/particles/actions/ZonedAction.ts","webpack:///./src/particles/actions/ActionCallback.ts","webpack:///./src/particles/actions/BoundingBox.ts","webpack:///./src/particles/actions/CollisionZone.ts","webpack:///./src/particles/zones/RectangleZone.ts","webpack:///./src/particles/zones/PointZone.ts","webpack:///./src/particles/particles/Particle.ts","webpack:///./src/particles/particles/Particle2D.ts","webpack:///./src/render/Game.vue","webpack:///./src/render/Game.vue?ff38","webpack:///./src/render/Game.vue?8c43","webpack:///./src/render/App.vue","webpack:///./src/render/App.vue?7273","webpack:///./src/render/App.vue?840d","webpack:///./src/main.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","staticRenderFns","ref","particles","graphices","render","handelWindowResize","canvas","width","innerWidth","height","innerHeight","addEventListener","console","log","removeEventListener","$refs","time","ctx","getContext","fillStyle","BACKGROUND_COLOR","fillRect","g","color","x","radius","y","particle","halfRadius","collisionRadius","VENUE_BACKGROUND_COLOR","components","component","emitter","_counter","_actions","_particles","_maximumFrameTime","_running","startEmitter","pop","removedFromEmitter","sort","prioritySort","map","action","addedToEmitter","len","priority","index","indexOf","killAllParticles","addParticles","removeParticle","b1","b2","update","isDead","_priority","previousX","previousY","velX","velY","zone","zoneIsSafe","_zone","_invertZone","inside","contains","power","_power","_x","_y","velLength","Math","sqrt","dx","dy","acc","targetX","targetY","dot","perpX","perpY","factor","invertZone","_action","_invert","callBack","once","_called","_callBack","_once","left","top","right","bottom","bounce","_left","_top","_right","_bottom","_bounce","position","collideParticle","_width","_height","isNaN","random","previousPosition","intersect","collision","point","_point","relativePreviousX","relativePreviousY","relativeX","relativeY","frameVelX","frameVelY","a","b","sq","srt","t1","t2","min","cx","cy","nx","ny","normalVel","scale","mass","lifetime","age","energy","_previousColor","cloneInto","Particle","rotation","angVelocity","sortID","_previousMass","_previousRadius","_inertia","emitters","MAX_BOTS_COUNT","MAX_VENUES_COUNT","MAX_PARTICLE_DELTA_MOTION","setupEmitter","tickProvider","add","delta","start","setupVenuesEmitter","actions","venues","getRandom","addAction","unshift","createHero","createBot","hero","addParticle","heroEmitter","destinationZone","turnTowardsPoint","zonedAction","removeAction","document","body","e","clientX","clientY","hasAction","precision","startWalkToNextZone","updateEmitters","updateRender","max","floor","Render","Game","config","productionTip","h","$mount","style"],"mappings":"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","file":"js/app.f2d52064.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"wrap_container\",attrs:{\"id\":\"app\"}},[_c('game')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('render',{ref:\"render\",attrs:{\"particles\":_vm.particles,\"graphices\":_vm.graphices}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('canvas',{ref:\"canvas\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\n\n\n\r\nimport { Component, Vue, Prop } from 'vue-property-decorator';\r\nimport Particle from '@/particles/particles/Particle2D';\r\n\r\n@Component({\r\n  components: {}\r\n})\r\nexport default class Render extends Vue {\r\n    @Prop()particles!: Array<Array<Particle>>;\r\n    @Prop()graphices!: Array<Graphics>;\r\n\r\n    static BACKGROUND_COLOR = '#e5c29d';\r\n    static VENUE_BACKGROUND_COLOR = '#9f7d5b';\r\n\r\n    private render = true;\r\n\r\n    mounted() {\r\n        this.handelWindowResize();\r\n        window.addEventListener('resize', this.handelWindowResize);\r\n    }\r\n\r\n    destroyed() {\r\n        console.log('Game', 'destroyed')\r\n\r\n        window.removeEventListener('resize', this.handelWindowResize);\r\n    }\r\n\r\n    private handelWindowResize = (): void => {\r\n        this.canvas.width = window.innerWidth;\r\n        this.canvas.height = window.innerHeight;\r\n    }\r\n\r\n    private get canvas(): HTMLCanvasElement {\r\n        return (this.$refs.canvas as HTMLCanvasElement);\r\n    }\r\n\r\n    public update(time: number): void {\r\n        if (!this.particles || !this.render) {\r\n            return;\r\n        }\r\n        \r\n        const ctx: CanvasRenderingContext2D = this.canvas.getContext('2d')!;\r\n        ctx.fillStyle = Render.BACKGROUND_COLOR;\r\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        if (this.graphices) {\r\n            for (let i = 0; i < this.graphices.length; i++) {\r\n                const g: Graphics = this.graphices[i];\r\n                ctx.fillStyle = g.color;\r\n                ctx.fillRect(g.x - g.radius / 2, g.y - g.radius / 2, g.radius, g.radius);\r\n            }\r\n        }\r\n        \r\n        for (let j = 0; j < this.particles.length; j++) {\r\n            \r\n            const particles: Array<Particle> = this.particles[j];\r\n            \r\n            for (let i = 0; i < particles.length; i++) {\r\n                const particle: Particle = particles[i];\r\n                const halfRadius = particle.collisionRadius / 2;\r\n                ctx.fillStyle = particle.color;\r\n                ctx.fillRect(particle.x - halfRadius, particle.y - halfRadius, particle.collisionRadius, particle.collisionRadius);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class Graphics {\r\n    public x: number;\r\n    public y: number;\r\n    public radius: number;\r\n    public color: string;\r\n    constructor(x: number, y: number, radius: number, color: string = Render.VENUE_BACKGROUND_COLOR) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Render.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Render.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Render.vue?vue&type=template&id=403890ab&\"\nimport script from \"./Render.vue?vue&type=script&lang=ts&\"\nexport * from \"./Render.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Emitter from '../emitters/Emitter';\r\nimport Counter from './Counter';\r\n\r\nexport default class ZeroCounter implements Counter {\r\n    \r\n    /**\r\n     * Returns 0 to indicate that the emitter should emit no particles when it\r\n     * starts.\r\n     * \r\n     * <p>This method is called within the emitter's start method \r\n     * and need not be called by the user.</p>\r\n     * \r\n     * @param emitter The emitter.\r\n     * @return 0\r\n     * \r\n     * @see org.flintparticles.common.counters.Counter#startEmitter()\r\n     */\r\n    public startEmitter(emitter: Emitter): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns 0 to indicate that the emitter should emit no particles.\r\n     * \r\n     * <p>This method is called within the emitter's update loop and need not\r\n     * be called by the user.</p>\r\n     * \r\n     * @param emitter The emitter.\r\n     * @param time The time, in seconds, since the previous call to this method.\r\n     * @return 0\r\n     * \r\n     * @see org.flintparticles.common.counters.Counter#updateEmitter()\r\n     */\r\n    public updateEmitter(emitter: Emitter, time: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Does nothing\r\n     */\r\n    public stop(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Does nothing\r\n     */\r\n    public resume(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the counter has emitted all its particles. For the ZeroCounter\r\n     * this will always be true.\r\n     */\r\n    public get complete(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the counter is currently emitting particles\r\n     */\r\n    public get running(): boolean {\r\n        return false;\r\n    }\r\n}","/*\r\n * FLINT PARTICLE SYSTEM\r\n * .....................\r\n * \r\n * Author: Richard Lord\r\n * Copyright (c) Richard Lord 2008-2011\r\n * http://flintparticles.org\r\n * \r\n */\r\n\r\nimport Action from \"../actions/Action\";\r\nimport Counter from \"../counters/Counter\";\r\nimport ZeroCounter from \"../counters/ZeroCounter\";\r\nimport Particle from \"../particles/Particle2D\";\r\n\r\nexport default class Emitter {\r\n\r\n    protected _counter: Counter = new ZeroCounter();\r\n    protected _actions: Array<Action> = [];\r\n    protected _particles: Array<any> = [];\r\n\r\n    protected _maximumFrameTime = 0.1;\r\n\r\n    protected _running = false;\r\n\r\n    public get counter(): Counter {\r\n        return this._counter;\r\n    }\r\n    public set counter(value: Counter) {\r\n        this._counter = value;\r\n        if (this._running) {\r\n            this._counter.startEmitter(this);\r\n        }\r\n    }\r\n\r\n    public get actions(): Array<Action> {\r\n        return this._actions;\r\n    }\r\n    public set actions(value: Array<Action>) {\r\n        while (this._actions.length) {\r\n            this._actions.pop()?.removedFromEmitter(this);\r\n        }\r\n\r\n        this._actions = value.slice();\r\n        this._actions.sort(this.prioritySort);\r\n\r\n        this._actions.map((action: Action) => {\r\n            action.addedToEmitter(this);\r\n        });\r\n    }\r\n\r\n    public addAction(action: Action): void {\r\n        const len = this._actions.length;\r\n        let i = 0;\r\n        for (i = 0; i < len; ++i) {\r\n            if (this._actions[i].priority < action.priority) {\r\n                break;\r\n            }\r\n        }\r\n        this._actions.splice(i, 0, action);\r\n        action.addedToEmitter(this);\r\n    }\r\n\r\n    /**\r\n     * Removes an Action from the Emitter.\r\n     * \r\n     * @param action The Action to remove\r\n     * \r\n     * @see addAction()\r\n     */\r\n    public removeAction(action: Action): void {\r\n        const index = this._actions.indexOf(action);\r\n        if (index != -1) {\r\n            this._actions.splice(index, 1);\r\n            action.removedFromEmitter(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detects if the emitter is using a particular action or not.\r\n     * \r\n     * @param action The action to look for.\r\n     * \r\n     * @return true if the action is being used by the emitter, false \r\n     * otherwise.\r\n     */\r\n    public hasAction(action: Action): boolean {\r\n        return this._actions.indexOf(action) != -1;\r\n    }\r\n\r\n    public get particles(): Array<Particle> {\r\n        return this._particles;\r\n    }\r\n\r\n    public set particles(value: Array<Particle>) {\r\n        this.killAllParticles();\r\n        this.addParticles(value);\r\n    }\r\n\r\n    public addParticle(particle: Particle): void {\r\n        this._particles.push(particle);\r\n    }\r\n\r\n    public addParticles(particles: Array<Particle>): void {\r\n        this._particles.splice(this._particles.length, 0, particles);\r\n    }\r\n\r\n    public removeParticle(particle: Particle): boolean {\r\n        const index = this._particles.indexOf(particle);\r\n        if (index != -1) {\r\n            this._particles.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public removeParticles(particles: Array<Particle>): void {\r\n        for (let i = 0; i < particles.length; i++) {\r\n            this.removeParticle(particles[i]);\r\n        }\r\n    }\r\n\r\n    public killAllParticles(): void {\r\n        this._particles.splice(0);\r\n    }\r\n\r\n    private prioritySort(b1: Action, b2: Action): number {\r\n        return b1.priority - b2.priority;\r\n    }\r\n\r\n    public update(time: number): void {\r\n        if (time > this._maximumFrameTime) {\r\n            time = this._maximumFrameTime;\r\n        }\r\n\r\n        // sortParticles();\r\n\r\n        if (this._particles.length == 0) {\r\n            return;\r\n        }\r\n\r\n        // update particle state\r\n        for (let j = 0; j < this._actions.length; j++) {\r\n            for (let i = 0; i < this._particles.length; i++) {\r\n                this._actions[j].update(this, this._particles[i], time);\r\n            }\r\n        }\r\n\r\n        // remove dead particles\r\n        const length = this._particles.length;\r\n        for (let i = length; i--;) {\r\n            const particle: Particle = this._particles[i];\r\n            if (particle.isDead) {\r\n                this._particles.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\n\r\nexport default class Action {\r\n\r\n    protected _priority = 0;\r\n\r\n    public get priority(): number {\r\n        return this._priority;\r\n    }\r\n    public set priority(value: number) {\r\n        this._priority = value;\r\n    }\r\n\r\n    public removedFromEmitter(emitter: Emitter): void {\r\n        console.log('action removedFromEmitter')\r\n    }\r\n\r\n    public addedToEmitter(emitter: Emitter): void {\r\n        console.log('action addedToEmitter')\r\n    }\r\n\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        console.log('action update')\r\n    }\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class Move extends Action {\r\n\t\tconstructor () {\r\n            super();\r\n\t\t\tthis.priority = -10;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Updates the particle's position based on its velocity and the period of \r\n\t\t * time indicated.\r\n\t\t * \r\n\t\t * <p>This method is called by the emitter and need not be called by the \r\n\t\t * user.</p>\r\n\t\t * \r\n\t\t * @param emitter The Emitter that created the particle.\r\n\t\t * @param particle The particle to be updated.\r\n\t\t * @param time The duration of the frame - used for time based updates.\r\n\t\t * \r\n\t\t * @see org.flintparticles.common.actions.Action#update()\r\n\t\t */\r\n\t\tpublic update( emitter: Emitter, particle: Particle, time: number ): void {\r\n\t\t\tparticle.previousX = particle.x;\r\n\t\t\tparticle.previousY = particle.y;\r\n\t\t\tparticle.x += particle.velX * time;\r\n\t\t\tparticle.y += particle.velY * time;\r\n\t\t}\r\n\t}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport { Zone2D } from \"../zones/Zone2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class DeathZone extends Action {\r\n    private _zone: Zone2D | null = null;\r\n    private _invertZone = false;\r\n\r\n    /**\r\n     * The constructor creates a DeathZone action for use by an emitter. \r\n     * To add a DeathZone to all particles created by an emitter, use the\r\n     * emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.common.emitters.Emitter#addAction()\r\n     * @see org.flintparticles.twoD.zones\r\n     * \r\n     * @param zone The zone to use. Any item from the \r\n     * org.flintparticles.twoD.zones package can be used.\r\n     * @param zoneIsSafe If true, the zone is treated as the safe area\r\n     * and particles outside the zone are killed. If false, particles\r\n     * inside the zone are killed.\r\n     */\r\n    constructor(zone: Zone2D, zoneIsSafe = false) {\r\n        super();\r\n        this.priority = -20;\r\n        this.zone = zone;\r\n        this.zoneIsSafe = zoneIsSafe;\r\n    }\r\n\r\n    /**\r\n     * The zone.\r\n     */\r\n    public get zone(): Zone2D {\r\n        return this._zone!;\r\n    }\r\n    public set zone(value: Zone2D) {\r\n        this._zone = value;\r\n    }\r\n\r\n    /**\r\n     * If true, the zone is treated as the safe area and particles ouside the \r\n     * zone are killed. If false, particles inside the zone are killed.\r\n     */\r\n    public get zoneIsSafe(): boolean {\r\n        return this._invertZone;\r\n    }\r\n    public set zoneIsSafe(value: boolean) {\r\n        this._invertZone = value;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the particle is inside the zone and kills it if it is\r\n     * in the DeathZone region.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user.</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        const inside = this._zone!.contains(particle.x, particle.y);\r\n        if (this._invertZone) {\r\n            if (!inside) {\r\n                particle.isDead = true;\r\n            }\r\n        }\r\n        else {\r\n            if (inside) {\r\n                particle.isDead = true;\r\n            }\r\n        }\r\n    }\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class TurnTowardsPoint extends Action {\r\n    private _x: number;\r\n    private _y: number;\r\n    private _power: number;\r\n\r\n    /**\r\n     * The constructor creates a TurnTowardsPoint action for use by an emitter. \r\n     * To add a TurnTowardsPoint to all particles created by an emitter, use the\r\n     * emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.common.emitters.Emitter#addAction()\r\n     * \r\n     * @param power The strength of the turn action. Higher values produce a sharper turn.\r\n     * @param x The x coordinate of the point towards which the particle turns.\r\n     * @param y The y coordinate of the point towards which the particle turns.\r\n     */\r\n    constructor(x = 0, y = 0, power = 0) {\r\n        super();\r\n        this._power = power;\r\n        this._x = x;\r\n        this._y = y;\r\n    }\r\n\r\n    /**\r\n     * The strength of the turn action. Higher values produce a sharper turn.\r\n     */\r\n    public get power(): number {\r\n        return this._power;\r\n    }\r\n    public set power(value: number) {\r\n        this._power = value;\r\n    }\r\n\r\n    /**\r\n     * The x coordinate of the point that the particle turns towards.\r\n     */\r\n    public get x(): number {\r\n        return this._x;\r\n    }\r\n    public set x(value: number) {\r\n        this._x = value;\r\n    }\r\n\r\n    /**\r\n     * The y coordinate of the point that the particle turns towards.\r\n     */\r\n    public get y(): number {\r\n        return this._y;\r\n    }\r\n    public set y(value: number) {\r\n        this._y = value;\r\n    }\r\n\r\n    /**\r\n     * Calculates the direction to the focus point and turns the particle towards \r\n     * this direction.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user.</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        const velLength = Math.sqrt(particle.velX * particle.velX + particle.velY * particle.velY);\r\n        const dx = particle.velX / velLength;\r\n        const dy = particle.velY / velLength;\r\n        const acc = this.power * time;\r\n        let targetX = this._x - particle.x;\r\n        let targetY = this._y - particle.y;\r\n        const len = Math.sqrt(targetX * targetX + targetY * targetY);\r\n        if (len == 0) {\r\n            return;\r\n        }\r\n        targetX /= len;\r\n        targetY /= len;\r\n        const dot = targetX * dx + targetY * dy;\r\n        const perpX = targetX - dx * dot;\r\n        const perpY = targetY - dy * dot;\r\n        let factor = acc / Math.sqrt(perpX * perpX + perpY * perpY);\r\n        particle.velX += perpX * factor;\r\n        particle.velY += perpY * factor;\r\n        factor = velLength / Math.sqrt(particle.velX * particle.velX + particle.velY * particle.velY);\r\n        particle.velX *= factor;\r\n        particle.velY *= factor;\r\n    }\r\n}","/**\r\n     * The ZonedAction Action applies an action to the particle only if it is in \r\n     * the specified zone. \r\n     */\r\n\r\nimport Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport { Zone2D } from \"../zones/Zone2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class ZonedAction extends Action {\r\n    private _action: Action;\r\n    private _zone: Zone2D;\r\n    private _invert: boolean;\r\n\r\n    /**\r\n     * The constructor creates a ZonedAction action for use by an emitter. \r\n     * To add a ZonedAction to all particles created by an emitter, use the\r\n     * emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.emitters.Emitter#addAction()\r\n     * \r\n     * @param action The action to apply when inside the zone.\r\n     * @param zone The zone in which to apply the action.\r\n     * @param invertZone If false (the default) the action is applied only to \r\n     * particles inside the zone. If true the action is applied only to \r\n     * particles outside the zone.\r\n     */\r\n    constructor(action: Action, zone: Zone2D, invertZone = false) {\r\n        super();\r\n        this._action = action;\r\n        this._zone = zone;\r\n        this._invert = invertZone;\r\n    }\r\n\r\n    /**\r\n     * The action to apply when inside the zone.\r\n     */\r\n    public get action(): Action {\r\n        return this._action;\r\n    }\r\n    public set action(value: Action) {\r\n        this._action = value;\r\n    }\r\n\r\n    /**\r\n     * The zone in which to apply the acceleration.\r\n     */\r\n    public get zone(): Zone2D {\r\n        return this._zone;\r\n    }\r\n    public set zone(value: Zone2D) {\r\n        this._zone = value;\r\n    }\r\n\r\n    /**\r\n     * If false (the default), the action is applied only to particles inside \r\n     * the zone. If true, the action is applied only to particles outside the zone.\r\n     */\r\n    public get invertZone(): boolean {\r\n        return this._invert;\r\n    }\r\n    public set invertZone(value: boolean) {\r\n        this._invert = value;\r\n    }\r\n\r\n    /**\r\n     * Provides acces to the priority of the action being used.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#getDefaultPriority()\r\n     */\r\n    public get priority(): number {\r\n        return this._action.priority;\r\n    }\r\n    public set priority(value: number) {\r\n        this._action.priority = value;\r\n    }\r\n\r\n    /**\r\n     * Calls the addedToEmitter method of the action being used.\r\n     * \r\n     * @param emitter The emitter this action has been added to.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#addedToEmitter()\r\n     */\r\n    public addedToEmitter(emitter: Emitter): void {\r\n        this._action.addedToEmitter(emitter);\r\n    }\r\n\r\n    /**\r\n     * Calls the removedFromEmitter method of the action being used.\r\n     * \r\n     * @param emitter The emitter this action has been added to.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#removedFromEmitter()\r\n     */\r\n    public removedFromEmitter(emitter: Emitter): void {\r\n        this._action.removedFromEmitter(emitter);\r\n    }\r\n\r\n    /**\r\n     * Checks if the particle is in the zone and if so calls the update\r\n     * method of the action being used.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user.</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        if (this._zone.contains(particle.x, particle.y)) {\r\n            if (!this._invert) {\r\n                this._action.update(emitter, particle, time);\r\n            }\r\n        }\r\n        else {\r\n            if (this._invert) {\r\n                this._action.update(emitter, particle, time);\r\n            }\r\n        }\r\n    }\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\n/*\r\n * Для использования с ZonedAction\r\n */\r\nexport default class ActionCallback extends Action {\r\n\r\n    private _callBack: Function;\r\n    private _once: boolean;\r\n    private _called = false;\r\n    \r\n    constructor(callBack: Function, once = false) {\r\n        super();\r\n        this._callBack = callBack;\r\n        this._once = once;\r\n    }\r\n\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        if (this._once && !this._called) {\r\n            this._callBack();\r\n        } else {\r\n            this._callBack();\r\n        }\r\n\r\n        this._called = true;\r\n    }\r\n}","/**\r\n * The BoundingBox action confines each particle to a rectangle region. The \r\n * particle bounces back off the sides of the rectangle when it reaches \r\n * the edge. The bounce treats the particle as a circular body. By default,\r\n * no energy is lost in the collision. This can be modified by setting the\r\n * bounce property to a value other than 1, its default value.\r\n * \r\n * This action has a priority of -20, so that it executes after \r\n * all movement has occured.\r\n */\r\n\r\nimport Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class BoundingBox extends Action {\r\n    private _left: number;\r\n    private _top: number;\r\n    private _right: number;\r\n    private _bottom: number;\r\n    private _bounce: number;\r\n\r\n    /**\r\n     * The constructor creates a BoundingBox action for use by \r\n     * an emitter. To add a BoundingBox to all particles created by an emitter, \r\n     * use the emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.common.emitters.Emitter#addAction()\r\n     * \r\n     * @param left The left coordinate of the box.\r\n     * @param top The top coordinate of the box.\r\n     * @param right The right coordinate of the box.\r\n     * @param bottom The bottom coordinate of the box.\r\n     * @param bounce The coefficient of restitution when the particles bounce off the\r\n     * sides of the box. A value of 1 gives a pure elastic collision, with no energy loss. \r\n     * A value between 0 and 1 causes the particle to loose enegy in the collision. A value \r\n     * greater than 1 causes the particle to gain energy in the collision.\r\n     */\r\n    constructor(left = 0, top = 0, right = 0, bottom = 0, bounce = 1) {\r\n        super();\r\n        this.priority = -20;\r\n        this._left = left;\r\n        this._top = top;\r\n        this._right = right;\r\n        this._bottom = bottom;\r\n        this._bounce = bounce;\r\n    }\r\n\r\n    /**\r\n     * The left coordinate of the bounding box.\r\n     */\r\n    public get left(): number {\r\n        return this._left;\r\n    }\r\n    public set left(value: number) {\r\n        this._left = value;\r\n    }\r\n\r\n    /**\r\n     * The top coordinate of the bounding box.\r\n     */\r\n    public get top(): number {\r\n        return this._top;\r\n    }\r\n    public set top(value: number) {\r\n        this._top = value;\r\n    }\r\n\r\n    /**\r\n     * The left coordinate of the bounding box.\r\n     */\r\n    public get right(): number {\r\n        return this._right;\r\n    }\r\n    public set right(value: number) {\r\n        this._right = value;\r\n    }\r\n\r\n    /**\r\n     * The left coordinate of the bounding box.\r\n     */\r\n    public get bottom(): number {\r\n        return this._bottom;\r\n    }\r\n    public set bottom(value: number) {\r\n        this._bottom = value;\r\n    }\r\n\r\n    /**\r\n     * The coefficient of restitution when the particles bounce off the\r\n     * sides of the box. A value of 1 gives a pure pure elastic collision, with no energy loss. \r\n     * A value between 0 and 1 causes the particle to loose enegy in the collision. A value \r\n     * greater than 1 causes the particle to gain energy in the collision.\r\n     */\r\n    public get bounce(): number {\r\n        return this._bounce;\r\n    }\r\n    public set bounce(value: number) {\r\n        this._bounce = value;\r\n    }\r\n\r\n    /**\r\n     * Tests whether the particle is at the edge of the box and, if so,\r\n     * adjusts its velocity to bounce in back towards the center of the\r\n     * box.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        const p: Particle = particle;\r\n        const radius = particle.collisionRadius;\r\n        let position;\r\n        if (p.velX > 0 && (position = p.x + radius) >= this._right) {\r\n            p.velX = -p.velX * this._bounce;\r\n            p.x += 2 * (this._right - position);\r\n        }\r\n        else if (p.velX < 0 && (position = p.x - radius) <= this._left) {\r\n            p.velX = -p.velX * this._bounce;\r\n            p.x += 2 * (this._left - position);\r\n        }\r\n        if (p.velY > 0 && (position = p.y + radius) >= this._bottom) {\r\n            p.velY = -p.velY * this._bounce;\r\n            p.y += 2 * (this._bottom - position);\r\n\r\n        }\r\n        else if (p.velY < 0 && (position = p.y - radius) <= this._top) {\r\n            p.velY = -p.velY * this._bounce;\r\n            p.y += 2 * (this._top - position);\r\n\r\n        }\r\n    }\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport { Zone2D } from \"../zones/Zone2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class CollisionZone extends Action {\r\n    private _bounce: number;\r\n    private _zone: Zone2D;\r\n\r\n    /**\r\n     * The constructor creates a CollisionZone action for use by  an emitter.\r\n     * To add a CollisionZone to all particles managed by an emitter, use the\r\n     * emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.common.emitters.Emitter#addAction()\r\n     * \r\n     * @param zone The zone that the particles should collide with.\r\n     * @param bounce The coefficient of restitution when the particles collide. \r\n     * A value of 1 gives a pure elastic collision, with no energy loss. A \r\n     * value between 0 and 1 causes the particles to loose enegy in the \r\n     * collision. A value greater than 1 causes the particle to gain energy \r\n     * in the collision.\r\n     */\r\n    constructor(zone: Zone2D, bounce = 1) {\r\n        super();\r\n        this.priority = -30;\r\n        this._bounce = bounce;\r\n        this._zone = zone;\r\n    }\r\n\r\n    /**\r\n     * The zone that the particles should collide with.\r\n     */\r\n    public get zone(): Zone2D {\r\n        return this._zone;\r\n    }\r\n    public set zone(value: Zone2D) {\r\n        this._zone = value;\r\n    }\r\n\r\n    /**\r\n     * The coefficient of restitution when the particles collide. A value of \r\n     * 1 gives a pure elastic collision, with no energy loss. A value\r\n     * between 0 and 1 causes the particles to loose enegy in the collision. \r\n     * A value greater than 1 causes the particles to gain energy in the collision.\r\n     */\r\n    public get bounce(): number {\r\n        return this._bounce;\r\n    }\r\n    public set bounce(value: number) {\r\n        this._bounce = value;\r\n    }\r\n\r\n    /**\r\n     * Checks for collisions between the particle and the zone.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user.</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        const collide = this._zone.collideParticle(particle, this._bounce);\r\n    }\r\n}","import Particle from \"../particles/Particle2D\";\r\nimport { Point, Zone2D } from \"./Zone2D\";\r\n\r\nexport default class RectangleZone implements Zone2D {\r\n    private _left: number;\r\n    private _top: number;\r\n    private _right: number;\r\n    private _bottom: number;\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    /**\r\n     * The constructor creates a RectangleZone zone.\r\n     * \r\n     * @param left The left coordinate of the rectangle defining the region of the zone.\r\n     * @param top The top coordinate of the rectangle defining the region of the zone.\r\n     * @param right The right coordinate of the rectangle defining the region of the zone.\r\n     * @param bottom The bottom coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    constructor(left = 0, top = 0, right = 0, bottom = 0) {\r\n        this._left = left;\r\n        this._top = top;\r\n        this._right = right;\r\n        this._bottom = bottom;\r\n        this._width = right - left;\r\n        this._height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * The left coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    public get left(): number {\r\n        return this._left;\r\n    }\r\n\r\n    public set left(value: number) {\r\n        this._left = value;\r\n        if (!isNaN(this._right) && !isNaN(this._left)) {\r\n            this._width = this.right - this.left;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The right coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    public get right(): number {\r\n        return this._right;\r\n    }\r\n\r\n    public set right(value: number) {\r\n        this._right = value;\r\n        if (!isNaN(this._right) && !isNaN(this._left)) {\r\n            this._width = this.right - this.left;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The top coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    public get top(): number {\r\n        return this._top;\r\n    }\r\n\r\n    public set top(value: number) {\r\n        this._top = value;\r\n        if (!isNaN(this._top) && !isNaN(this._bottom)) {\r\n            this._height = this.bottom - this.top;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The bottom coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    public get bottom(): number {\r\n        return this._bottom;\r\n    }\r\n\r\n    public set bottom(value: number) {\r\n        this._bottom = value;\r\n        if (!isNaN(this._top) && !isNaN(this._bottom)) {\r\n            this._height = this.bottom - this.top;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The contains method determines whether a point is inside the zone.\r\n     * This method is used by the initializers and actions that\r\n     * use the zone. Usually, it need not be called directly by the user.\r\n     * \r\n     * @param x The x coordinate of the location to test for.\r\n     * @param y The y coordinate of the location to test for.\r\n     * @return true if point is inside the zone, false if it is outside.\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        return x >= this._left && x <= this._right && y >= this._top && y <= this._bottom;\r\n    }\r\n\r\n    /**\r\n     * The getLocation method returns a random point inside the zone.\r\n     * This method is used by the initializers and actions that\r\n     * use the zone. Usually, it need not be called directly by the user.\r\n     * \r\n     * @return a random point inside the zone.\r\n     */\r\n    public getLocation(): Point {\r\n        return { x: this._left + Math.random() * this._width, y: this._top + Math.random() * this._height };\r\n    }\r\n\r\n    /**\r\n     * The getArea method returns the size of the zone.\r\n     * This method is used by the MultiZone class. Usually, \r\n     * it need not be called directly by the user.\r\n     * \r\n     * @return a random point inside the zone.\r\n     */\r\n    public getArea(): number {\r\n        return this._width * this._height;\r\n    }\r\n\r\n    /**\r\n     * Manages collisions between a particle and the zone. Particles will collide with the edges \r\n     * of the rectangle defined for this zone, from inside or outside the zone. The collisionRadius\r\n     * of the particle is used when calculating the collision.\r\n     * \r\n     * @param particle The particle to be tested for collision with the zone.\r\n     * @param bounce The coefficient of restitution for the collision.\r\n     * \r\n     * @return Whether a collision occured.\r\n     */\r\n    public collideParticle(particle: Particle, bounce = 1): boolean {\r\n        let position: number;\r\n        let previousPosition: number;\r\n        let intersect: number;\r\n        let collision = false;\r\n\r\n        if (particle.velX > 0) {\r\n            position = particle.x + particle.collisionRadius;\r\n            previousPosition = particle.previousX + particle.collisionRadius;\r\n            if (previousPosition < this._left && position >= this._left) {\r\n                intersect = particle.previousY + (particle.y - particle.previousY) * (this._left - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {\r\n                    particle.velX = -particle.velX * bounce;\r\n                    particle.x += 2 * (this._left - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n            else if (previousPosition <= this._right && position > this._right) {\r\n                intersect = particle.previousY + (particle.y - particle.previousY) * (this._right - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {\r\n                    particle.velX = -particle.velX * bounce;\r\n                    particle.x += 2 * (this._right - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n        }\r\n        else if (particle.velX < 0) {\r\n            position = particle.x - particle.collisionRadius;\r\n            previousPosition = particle.previousX - particle.collisionRadius;\r\n            if (previousPosition > this._right && position <= this._right) {\r\n                intersect = particle.previousY + (particle.y - particle.previousY) * (this._right - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {\r\n                    particle.velX = -particle.velX * bounce;\r\n                    particle.x += 2 * (this._right - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n            else if (previousPosition >= this._left && position < this._left) {\r\n                intersect = particle.previousY + (particle.y - particle.previousY) * (this._left - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {\r\n                    particle.velX = -particle.velX * bounce;\r\n                    particle.x += 2 * (this._left - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (particle.velY > 0) {\r\n            position = particle.y + particle.collisionRadius;\r\n            previousPosition = particle.previousY + particle.collisionRadius;\r\n            if (previousPosition < this._top && position >= this._top) {\r\n                intersect = particle.previousX + (particle.x - particle.previousX) * (this._top - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {\r\n                    particle.velY = -particle.velY * bounce;\r\n                    particle.y += 2 * (this._top - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n            else if (previousPosition <= this._bottom && position > this._bottom) {\r\n                intersect = particle.previousX + (particle.x - particle.previousX) * (this._bottom - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {\r\n                    particle.velY = -particle.velY * bounce;\r\n                    particle.y += 2 * (this._bottom - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n        }\r\n        else if (particle.velY < 0) {\r\n            position = particle.y - particle.collisionRadius;\r\n            previousPosition = particle.previousY - particle.collisionRadius;\r\n            if (previousPosition > this._bottom && position <= this._bottom) {\r\n                intersect = particle.previousX + (particle.x - particle.previousX) * (this._bottom - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {\r\n                    particle.velY = -particle.velY * bounce;\r\n                    particle.y += 2 * (this._bottom - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n            else if (previousPosition >= this._top && position < this._top) {\r\n                intersect = particle.previousX + (particle.x - particle.previousX) * (this._top - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {\r\n                    particle.velY = -particle.velY * bounce;\r\n                    particle.y += 2 * (this._top - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return collision;\r\n    }\r\n}","import Particle from \"../particles/Particle2D\";\r\nimport { Point, Zone2D } from \"./Zone2D\";\r\n\r\nexport default class PointZone implements Zone2D {\r\n    private _point: Point;\r\n\r\n    /**\r\n     * The constructor defines a PointZone zone.\r\n     * \r\n     * @param point The point that is the zone.\r\n     */\r\n    constructor(point: Point) {\r\n        this._point = point;\r\n    }\r\n\r\n    /**\r\n     * The point that is the zone.\r\n     */\r\n    public get point(): Point {\r\n        return this._point;\r\n    }\r\n\r\n    public set point(value: Point) {\r\n        this._point = value;\r\n    }\r\n\r\n    /**\r\n     * The x coordinate of the point that is the zone.\r\n     */\r\n    public get x(): number {\r\n        return this._point.x;\r\n    }\r\n\r\n    public set x(value: number) {\r\n        this._point.x = value;\r\n    }\r\n\r\n    /**\r\n     * The y coordinate of the point that is the zone.\r\n     */\r\n    public get y(): number {\r\n        return this._point.y;\r\n    }\r\n\r\n    public set y(value: number) {\r\n        this._point.y = value;\r\n    }\r\n\r\n    /**\r\n     * The contains method determines whether a point is inside the zone.\r\n     * This method is used by the initializers and actions that\r\n     * use the zone. Usually, it need not be called directly by the user.\r\n     * \r\n     * @param x The x coordinate of the location to test for.\r\n     * @param y The y coordinate of the location to test for.\r\n     * @return true if point is inside the zone, false if it is outside.\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        return this._point.x == x && this._point.y == y;\r\n    }\r\n\r\n    /**\r\n     * The getLocation method returns a random point inside the zone.\r\n     * This method is used by the initializers and actions that\r\n     * use the zone. Usually, it need not be called directly by the user.\r\n     * \r\n     * @return a random point inside the zone.\r\n     */\r\n    public getLocation(): Point {\r\n        return { x: this._point.x, y: this._point.y };\r\n    }\r\n\r\n    /**\r\n     * The getArea method returns the size of the zone.\r\n     * This method is used by the MultiZone class. Usually, \r\n     * it need not be called directly by the user.\r\n     * \r\n     * @return a random point inside the zone.\r\n     */\r\n    public getArea(): number {\r\n        // treat as one pixel square\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Manages collisions between a particle and the zone. Particles will colide with the point defined \r\n     * for this zone. The collisionRadius of the particle is used when calculating the collision.\r\n     * \r\n     * @param particle The particle to be tested for collision with the zone.\r\n     * @param bounce The coefficient of restitution for the collision.\r\n     * \r\n     * @return Whether a collision occured.\r\n     */\r\n    public collideParticle(particle: Particle, bounce = 1): boolean {\r\n        const relativePreviousX = particle.previousX - this._point.x;\r\n        const relativePreviousY = particle.previousY - this._point.y;\r\n        let dot = relativePreviousX * particle.velX + relativePreviousY * particle.velY;\r\n        if (dot >= 0) {\r\n            // console.log('collide false')\r\n            return false;\r\n        }\r\n\r\n        \r\n        const relativeX = particle.x - this._point.x;\r\n        const relativeY = particle.y - this._point.y;\r\n        const radius = particle.collisionRadius;\r\n        dot = relativeX * particle.velX + relativeY * particle.velY;\r\n        if (dot <= 0) {\r\n            if (relativeX > radius || relativeX < -radius) {\r\n                return false;\r\n            }\r\n            if (relativeY > radius || relativeY < -radius) {\r\n                return false;\r\n            }\r\n            if (relativeX * relativeX + relativeY * relativeY > radius * radius) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        let frameVelX = relativeX - relativePreviousX;\r\n        let frameVelY = relativeY - relativePreviousY;\r\n        const a = frameVelX * frameVelX + frameVelY * frameVelY;\r\n        const b = 2 * (relativePreviousX * frameVelX + relativePreviousY * frameVelY);\r\n        const c = relativePreviousX * relativePreviousX + relativePreviousY * relativePreviousY - radius * radius;\r\n        const sq = b * b - 4 * a * c;\r\n        if (sq < 0) {\r\n            return false;\r\n        }\r\n        const srt = Math.sqrt(sq);\r\n        const t1 = (-b + srt) / (2 * a);\r\n        const t2 = (-b - srt) / (2 * a);\r\n        const t: Array<number> = [];\r\n\r\n        if (t1 > 0 && t1 <= 1) {\r\n            t.push(t1);\r\n        }\r\n        if (t2 > 0 && t2 <= 1) {\r\n            t.push(t2);\r\n        }\r\n        let time = 0;\r\n        if (t.length == 0) {\r\n            return false;\r\n        }\r\n        if (t.length == 1) {\r\n            time = t[0];\r\n        }\r\n        else {\r\n            time = Math.min(t1, t2);\r\n        }\r\n        const cx = relativePreviousX + time * frameVelX + this._point.x;\r\n        const cy = relativePreviousY + time * frameVelY + this._point.y;\r\n        let nx = cx - this._point.x;\r\n        let ny = cy - this._point.y;\r\n        const d = Math.sqrt(nx * nx + ny * ny);\r\n        nx /= d;\r\n        ny /= d;\r\n        const n = frameVelX * nx + frameVelY * ny;\r\n        frameVelX -= 2 * nx * n;\r\n        frameVelY -= 2 * ny * n;\r\n        particle.x = cx + (1 - time) * frameVelX;\r\n        particle.y = cy + (1 - time) * frameVelY;\r\n        const normalVel = particle.velX * nx + particle.velY * ny;\r\n        particle.velX -= (1 + bounce) * nx * normalVel;\r\n        particle.velY -= (1 + bounce) * ny * normalVel;\r\n        return true;\r\n    }\r\n}","/**\r\n * The Particle class is a set of public properties shared by all particles.\r\n * It is deliberately lightweight, with only one method. The Initializers\r\n * and Actions modify these properties directly. This means that the same\r\n * particles can be used in many different emitters, allowing Particle \r\n * objects to be reused.\r\n * \r\n * Particles are usually created by the ParticleCreator class. This class\r\n * just simplifies the reuse of Particle objects which speeds up the\r\n * application. \r\n */\r\nexport default class Particle {\r\n    /**\r\n     * The 32bit ARGB color of the particle. The initial value is 0xFFFFFFFF (white).\r\n     */\r\n    public color = '#ffffff';\r\n\r\n    //  private _colorTransform:ColorTransform = null;\r\n    private _previousColor: string;\r\n\r\n    /**\r\n     * The scale of the particle ( 1 is normal size ).\r\n     */\r\n    public scale = 1;\r\n\r\n    /**\r\n     * The mass of the particle ( 1 is the default ).\r\n     */\r\n    public mass = 1;\r\n\r\n    /**\r\n     * The radius of the particle, for collision approximation\r\n     */\r\n    public collisionRadius = 1;\r\n\r\n    /**\r\n     * The object used to display the image. In a 2D particle, this is usually\r\n     * a DisplayObject. In a 3D particle, this may be a DisplayObject, for \r\n     * displaying on a billboard or similar, or a 3D object in the form used\r\n     * by the render system.\r\n     */\r\n    //  public image:* = null;\r\n\r\n    /**\r\n     * The lifetime of the particle, in seconds.\r\n     */\r\n    public lifetime = 0;\r\n    /**\r\n     * The age of the particle, in seconds.\r\n     */\r\n    public age = 0;\r\n    /**\r\n     * The energy of the particle.\r\n     */\r\n    public energy = 1;\r\n\r\n    /**\r\n     * Whether the particle is dead and should be removed from the stage.\r\n     */\r\n    public isDead = false;\r\n\r\n    /**\r\n     * The dictionary object enables actions and activities to add additional properties to the particle.\r\n     * Any object adding properties to the particle should use a reference to itself as the dictionary\r\n     * key, thus ensuring it doesn't clash with other object's properties. If multiple properties are\r\n     * needed, the dictionary value can be an object with a number of properties.\r\n     */\r\n    //  public get dictionary(): Dictionary\r\n    //  {\r\n    //      if( _dictionary == null )\r\n    //      {\r\n    //          _dictionary = new Dictionary( true );\r\n    //      }\r\n    //      return _dictionary;\r\n    //  }\r\n    //  private _dictionary:Dictionary = null;\r\n\r\n    /**\r\n     * Creates a particle. Alternatively particles can be reused by using the ParticleCreator to create\r\n     * and manage them. Usually the emitter will create the particles and the user doesn't need\r\n     * to create them.\r\n     */\r\n    constructor() {\r\n        this._previousColor = this.color;\r\n    }\r\n\r\n    /**\r\n     * Sets the particle's properties to their default values.\r\n     */\r\n    public initialize(): void {\r\n        this.color = '#ffffff';\r\n        this.scale = 1;\r\n        this.mass = 1;\r\n        this.collisionRadius = 1;\r\n        this.lifetime = 0;\r\n        this.age = 0;\r\n        this.energy = 1;\r\n        this.isDead = false;\r\n\r\n        //  image = null;\r\n        //  _dictionary = null;\r\n        //  _colorTransform = null;\r\n    }\r\n\r\n    /**\r\n     * A ColorTransform object that converts white to the colour of the particle.\r\n     */\r\n    //  public get colorTransform():ColorTransform\r\n    //  {\r\n    //      if( !_colorTransform || _previousColor != color )\r\n    //      {\r\n    //          _colorTransform = new ColorTransform( ( ( color >>> 16 ) & 255 ) / 255,\r\n    //                                 ( ( color >>> 8 ) & 255 ) / 255,\r\n    //                                 ( ( color ) & 255 ) / 255,\r\n    //                                 ( ( color >>> 24 ) & 255 ) / 255,\r\n    //                                 0,0,0,0 );\r\n    //          _previousColor = color;\r\n    //      }\r\n    //      return _colorTransform;\r\n    //  }\r\n\r\n    // public get alpha(): number {\r\n    //     return ((this.color & 0xFF000000) >>> 24) / 255;\r\n    // }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    protected cloneInto(p: Particle): Particle {\r\n        p.color = this.color;\r\n        p.scale = this.scale;\r\n        p.mass = this.mass;\r\n        p.collisionRadius = this.collisionRadius;\r\n        p.lifetime = this.lifetime;\r\n        p.age = this.age;\r\n        p.energy = this.energy;\r\n        p.isDead = this.isDead;\r\n        //  p.image = image;\r\n        //  if( _dictionary )\r\n        //  {\r\n        //      p._dictionary = new Dictionary( true );\r\n        //      for( key:Object in _dictionary )\r\n        //      {\r\n        //          p._dictionary[ key ] = _dictionary[ key ];\r\n        //      }\r\n        //  }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Creates a new particle with all the same properties as this one.\r\n     * \r\n     * <p>Note that the new particle will use the same image object as the one you're cloning.\r\n     * This is fine if the particles are used with a Bitmaprenderer, but if they are used with a \r\n     * DisplayObjectRenderer you will need to replace teh image property with a new image, otherwise\r\n     * only one of the particles (original or clone) will be displayed.</p>\r\n     */\r\n    public clone(): Particle {\r\n        return this.cloneInto(new Particle());\r\n    }\r\n\r\n    public revive(): void {\r\n        this.lifetime = 0;\r\n        this.age = 0;\r\n        this.energy = 1;\r\n        this.isDead = false;\r\n    }\r\n}","import Particle from \"./Particle\";\r\n\r\nexport default class Particle2D extends Particle {\r\n\r\n    public x = 0;\r\n    public y = 0;\r\n    public previousX = 0;\r\n    public previousY = 0;\r\n    public velX = 0;\r\n    public velY = 0;\r\n    public rotation = 0;\r\n    public angVelocity = 0;\r\n\r\n    /**\r\n     * The position in the emitter's horizontal spacial sorted array\r\n     */\r\n    public sortID = -1;\r\n    \r\n    \r\n    private _previousMass;\r\n    private _previousRadius;\r\n    private _inertia;\r\n\r\n    /**\r\n     * The moment of inertia of the particle about its center point\r\n     */\r\n    public get inertia(): number {\r\n        if (this.mass != this._previousMass || this.collisionRadius != this._previousRadius) {\r\n            this._inertia = this.mass * this.collisionRadius * this.collisionRadius * 0.5;\r\n            this._previousMass = this.mass;\r\n            this._previousRadius = this.collisionRadius;\r\n        }\r\n        return this._inertia;\r\n    }\r\n}","\n\n\n\n\r\nimport { Component, Vue } from 'vue-property-decorator';\r\nimport { FrameTickProvider } from '@ash.ts/tick';\r\nimport Render, { Graphics } from './Render.vue';\r\nimport Emitter from '@/particles/emitters/Emitter';\r\nimport Move from '@/particles/actions/Move';\r\nimport DeathZone from '@/particles/actions/DeathZone';\r\nimport MouseGravity from '@/particles/actions/MouseGravity';\r\nimport MouseAntiGravity from '@/particles/actions/MouseAntiGravity';\r\nimport SpeedLimit from '@/particles/actions/SpeedLimit';\r\nimport TurnTowardsPoint from '@/particles/actions/TurnTowardsPoint';\r\nimport TweenPosition from '@/particles/actions/TweenPosition';\r\nimport ZonedAction from '@/particles/actions/ZonedAction';\r\nimport ActionCallback from '@/particles/actions/ActionCallback';\r\nimport BoundingBox from '@/particles/actions/BoundingBox';\r\nimport CollisionZone from '@/particles/actions/CollisionZone';\r\nimport RectangleZone from '@/particles/zones/RectangleZone';\r\nimport PointZone from '@/particles/zones/PointZone';\r\nimport Particle from '@/particles/particles/Particle2D';\r\nimport Action from '@/particles/actions/Action';\r\nimport Particle2D from '@/particles/particles/Particle2D';\r\n\r\n@Component({\r\n  components: {\r\n      Render\r\n  }\r\n})\r\nexport default class Game extends Vue {\r\n\r\n    private emitters: Array<Emitter> = [];\r\n    private particles: Array<Array<Particle>> = [];\r\n    private graphices: Array<Graphics> = [];\r\n\r\n    private MAX_BOTS_COUNT = 100;\r\n    private MAX_VENUES_COUNT = 500;\r\n    private MAX_PARTICLE_DELTA_MOTION = 100;\r\n\r\n    mounted() {\r\n        this.setupEmitter();\r\n    \r\n        const tickProvider = new FrameTickProvider();\r\n        tickProvider.add(delta => this.update(delta));\r\n        tickProvider.start();\r\n    }\r\n\r\n    destroyed() {\r\n        console.log('Game', 'destroyed')\r\n    }\r\n\r\n    private setupEmitter(): void {\r\n        // this.setupPachenkoEmitter();\r\n        this.setupVenuesEmitter();\r\n    }\r\n\r\n    private setupVenuesEmitter(): void {\r\n        // common emitter\r\n        const emitter: Emitter = new Emitter();\r\n        emitter.actions = [\r\n            new Move(), \r\n            new BoundingBox(10, 10, window.innerWidth - 10, window.innerHeight - 10)\r\n        ];\r\n\r\n        // add Veniuses\r\n        const venues: Array<Graphics> = [];\r\n        for (let i = 0; i < this.MAX_VENUES_COUNT; i++) {\r\n            const x = this.getRandom(100, window.innerWidth - 100);\r\n            const y = this.getRandom(100, window.innerHeight - 100);\r\n\r\n            emitter.addAction(\r\n                new CollisionZone(new PointZone({x: x, y: y}), 1)\r\n            );\r\n            venues.unshift(new Graphics(x, y, 10))\r\n            this.graphices.push(venues[0]);\r\n        }\r\n    \r\n        this.emitters.push(emitter);\r\n        this.particles.push(emitter.particles);\r\n\r\n        this.createHero(emitter);\r\n\r\n        for (let i = 0; i < this.MAX_BOTS_COUNT; i++) {\r\n            this.createBot(emitter);\r\n        }\r\n    }\r\n\r\n    private createHero(emitter: Emitter): void {\r\n        // hero emitter\r\n        const hero: Particle = new Particle();\r\n        hero.x = 200;\r\n        hero.y = 100;\r\n        hero.velX = 0;\r\n        hero.velY = 0;\r\n        hero.collisionRadius = 5;\r\n        hero.color = '#ff0000';\r\n\r\n        emitter.addParticle(hero);\r\n\r\n        const heroEmitter: Emitter = new Emitter();\r\n        heroEmitter.addParticle(hero);\r\n        this.emitters.push(heroEmitter);\r\n        this.particles.push(heroEmitter.particles);\r\n\r\n        const destinationZone: RectangleZone = new RectangleZone();\r\n        const turnTowardsPoint: TurnTowardsPoint = new TurnTowardsPoint(window.innerWidth - 100, window.innerHeight - 100, 500);\r\n\r\n        const zonedAction: ZonedAction = new ZonedAction(\r\n                new ActionCallback(() => {\r\n                    heroEmitter.removeAction(turnTowardsPoint);\r\n                    heroEmitter.removeAction(zonedAction);\r\n                    hero.velX = 0;\r\n                    hero.velY = 0;\r\n                }, \r\n                false\r\n            ), \r\n            destinationZone\r\n        );\r\n        \r\n        document.body.addEventListener('click', (e: MouseEvent) => {\r\n            hero.velX = 60;\r\n            hero.velY = 60;\r\n\r\n            turnTowardsPoint.x = e.clientX;\r\n            turnTowardsPoint.y = e.clientY;\r\n            if (!heroEmitter.hasAction(turnTowardsPoint)) {\r\n                heroEmitter.addAction(turnTowardsPoint);\r\n            }\r\n\r\n            const precision = 3;\r\n            destinationZone.left = turnTowardsPoint.x - precision;\r\n            destinationZone.top = turnTowardsPoint.y - precision;\r\n            destinationZone.right = turnTowardsPoint.x + precision;\r\n            destinationZone.bottom = turnTowardsPoint.y + precision;\r\n            if (!heroEmitter.hasAction(zonedAction)) {\r\n                heroEmitter.addAction(zonedAction);\r\n            }\r\n        })\r\n    }\r\n\r\n    private createBot(emitter: Emitter): void {\r\n        // create particle\r\n        const hero: Particle = new Particle();\r\n        hero.x = this.getRandom(100, window.innerWidth - 100);\r\n        hero.y = this.getRandom(100, window.innerHeight - 100);\r\n        hero.collisionRadius = 5;\r\n        hero.color = '#0000cc';\r\n\r\n        // add particle to main emitter\r\n        emitter.addParticle(hero);\r\n\r\n        // create own control memitter\r\n        const destinationZone: RectangleZone = new RectangleZone();\r\n        const turnTowardsPoint: TurnTowardsPoint = new TurnTowardsPoint(0, 0, 500);\r\n        const startWalkToNextZone = () => {\r\n            hero.velX = this.getRandom(-100, 100);\r\n            hero.velY = this.getRandom(-100, 100);\r\n\r\n            turnTowardsPoint.x = this.getRandom(100, window.innerWidth - 100);\r\n            turnTowardsPoint.y = this.getRandom(100, window.innerHeight - 100);\r\n        \r\n            const precision = 5;\r\n            destinationZone.left = turnTowardsPoint.x - precision;\r\n            destinationZone.top = turnTowardsPoint.y - precision;\r\n            destinationZone.right = turnTowardsPoint.x + precision;\r\n            destinationZone.bottom = turnTowardsPoint.y + precision;\r\n        }\r\n        const zonedAction: ZonedAction = new ZonedAction(\r\n                new ActionCallback(() => {\r\n                    startWalkToNextZone();\r\n                }, \r\n                false\r\n            ), \r\n            destinationZone\r\n        );\r\n\r\n        const heroEmitter: Emitter = new Emitter();\r\n        heroEmitter.actions = [\r\n            turnTowardsPoint,\r\n            zonedAction\r\n        ];\r\n        heroEmitter.addParticle(hero);\r\n        this.emitters.push(heroEmitter);\r\n\r\n        // start bot\r\n        startWalkToNextZone();\r\n    }\r\n\r\n    private setupPachenkoEmitter(): void {\r\n        const emitter: Emitter = new Emitter();\r\n        emitter.actions = [\r\n            new Move(), \r\n            new DeathZone(new RectangleZone(100, 100, window.innerWidth - 100, window.innerHeight - 100), true),\r\n            // new MouseGravity(300, mouse, 100)\r\n            // new SpeedLimit(50, true)\r\n            // new MouseAntiGravity(10, mouse, 1)\r\n        ];\r\n\r\n        for (let i = 0; i < this.MAX_VENUES_COUNT; i++) {\r\n            const x = this.getRandom(100, window.innerWidth - 100);\r\n            const y = this.getRandom(100, window.innerHeight - 100);\r\n            emitter.addAction(\r\n                new CollisionZone( \r\n                    new PointZone({x: x, y: y}),\r\n                    1\r\n                )\r\n            );\r\n\r\n            this.graphices.push(new Graphics(x, y, 10));\r\n        }\r\n\r\n        this.emitters.push(emitter);\r\n        this.particles.push(emitter.particles)\r\n    }\r\n\r\n    private update(time: number) {\r\n        this.updateEmitters(time);\r\n        this.updateRender(time);\r\n    }\r\n\r\n    private updateEmitters(time: number): void {\r\n        for (let i = 0; i < this.emitters.length; i++) {\r\n            this.emitters[i].update(time);\r\n        }\r\n\r\n        // TODO counters\r\n        // if (this.emitters.length) {\r\n        //     const emitter: Emitter = this.emitters[0];\r\n        //     const length = emitter.particles.length;\r\n        //     for (let i = length; i < this.MAX_BOTS_COUNT; i++) {\r\n        //         emitter.addParticle(this.createParticle());\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    private updateRender(time: number): void {\r\n        (this.$refs.render as Render).update(time);\r\n    }\r\n\r\n    private createParticle(): Particle {\r\n        const particle: Particle = new Particle();\r\n        particle.collisionRadius = 5;\r\n        particle.color = '#705da4';\r\n        particle.x = this.getRandom(window.innerWidth * .2, window.innerWidth * .8);\r\n        particle.y = this.getRandom(window.innerHeight * .2, window.innerHeight * .8);\r\n        particle.velX = this.getRandom(-this.MAX_PARTICLE_DELTA_MOTION, this.MAX_PARTICLE_DELTA_MOTION);\r\n        particle.velY = this.getRandom(-this.MAX_PARTICLE_DELTA_MOTION, this.MAX_PARTICLE_DELTA_MOTION);\r\n        return particle;\r\n    }\r\n\r\n    private getRandom(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Game.vue?vue&type=template&id=94856a2c&\"\nimport script from \"./Game.vue?vue&type=script&lang=ts&\"\nexport * from \"./Game.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n\n\n\n\n\n\nimport \"@/styles/assets.styl\";\nimport { Component, Vue } from \"vue-property-decorator\";\nimport Game from \"./Game.vue\";\n\n@Component({\n    components: {\n        Game\n    },\n})\nexport default class App extends Vue {\n    mounted() {\n        console.log(\"App mounted\");    \n    }\n}\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=17f1026c&\"\nimport script from \"./App.vue?vue&type=script&lang=ts&\"\nexport * from \"./App.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\r\nimport App from './render/App.vue'\r\nimport createFps from 'fps-indicator';\r\n\r\nVue.config.productionTip = false\r\n\r\nnew Vue({\r\n  render: h => h(App)\r\n}).$mount('#app');\r\n\r\ncreateFps({style: 'padding: 20px; color: #ffffff; text-shadow: 0 0 4px black;'});\r\n"],"sourceRoot":""}