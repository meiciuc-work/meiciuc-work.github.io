{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/render/App.vue?8403","webpack:///./src/render/Game.vue?6a98","webpack:///./src/render/Render.vue?7b0f","webpack:///./src/render/Graphics.ts","webpack:///./src/render/Render.vue","webpack:///./src/render/Render.vue?0e80","webpack:///./src/render/Render.vue?8e02","webpack:///./src/particles/actions/Action.ts","webpack:///./src/particles/actions/ActionCallback.ts","webpack:///./src/particles/events/ParticleEvents.ts","webpack:///./src/particles/actions/BoundingBox.ts","webpack:///./src/particles/actions/CollisionZone.ts","webpack:///./src/particles/actions/Move.ts","webpack:///./src/particles/actions/SpeedLimit.ts","webpack:///./src/particles/actions/TurnTowardsPoint.ts","webpack:///./src/particles/actions/ZonedAction.ts","webpack:///./src/particles/counters/ZeroCounter.ts","webpack:///./src/particles/emitters/Emitter.ts","webpack:///./src/particles/particles/Particle.ts","webpack:///./src/particles/particles/Particle2D.ts","webpack:///./src/particles/zones/CircleZone.ts","webpack:///./src/particles/zones/RectangleZone.ts","webpack:///./src/render/KeyPoll.ts","webpack:///./src/render/Keyboard.ts","webpack:///./src/render/Collisions1.ts","webpack:///./src/render/Game.vue","webpack:///./src/render/Game.vue?ff38","webpack:///./src/render/Game.vue?8c43","webpack:///./src/render/App.vue","webpack:///./src/render/App.vue?7273","webpack:///./src/render/App.vue?840d","webpack:///./src/main.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","staticRenderFns","ref","particles","graphices","x","y","radius","color","Graphics","VENUE_BACKGROUND_COLOR","BACKGROUND_COLOR","render","circles","handelWindowResize","canvas","width","innerWidth","height","innerHeight","addEventListener","console","log","removeEventListener","$refs","time","ctx","getContext","fillStyle","fillRect","g","drawCircle","particle","collisionRadius","document","createElement","context","beginPath","arc","Math","PI","fill","drawImage","components","component","_priority","emitter","callBack","once","_called","_callBack","_once","ZONE_COLLISION","BOUNDING_BOX_COLLISION","left","top","right","bottom","bounce","priority","_left","_top","_right","_bottom","_bounce","position","collide","velX","velY","hasEventListener","options","detail","action","dispatchEvent","CustomEvent","zone","_zone","collideParticle","previousX","previousY","speed","Number","MAX_VALUE","isMinimum","_limit","_limitSq","_isMinimum","speedSq","scale","sqrt","power","_power","_x","_y","velLength","dx","dy","acc","targetX","targetY","len","dot","perpX","perpY","factor","invertZone","_action","_invert","addedToEmitter","removedFromEmitter","contains","update","_counter","_actions","_particles","_maximumFrameTime","_running","_eventTypes","_eventDispatcher","type","callback","event","startEmitter","pop","sort","prioritySort","map","index","indexOf","killAllParticles","addParticles","removeParticle","b1","b2","isDead","mass","lifetime","age","energy","_previousColor","cloneInto","Particle","rotation","angVelocity","sortID","_previousMass","_previousRadius","_inertia","center","outerRadius","_center","_outerRadius","_outerSq","distSq","rand","random","point","getPolar","CircleZone","TWOPI","outerLimit","outerLimitSq","distanceSq","distance","pdx","pdy","pDistanceSq","adjustSpeed","positionRatio","epsilon","dotProduct","abs","theta","cos","sin","_width","_height","isNaN","previousPosition","intersect","collision","WORD_SIZE","keys","Int32Array","keyDownHandler","keyCode","floor","keyUpHandler","isDown","A","D","S","W","LEFT","RIGHT","UP","DOWN","emitters","MAX_BOTS_COUNT","MAX_VENUES_COUNT","MAX_PARTICLE_DELTA_MOTION","setupEmitter","actions","createVenues","createHero","createBot","getBotNewDestinationPoint","venues","getRandom","addAction","unshift","hero","addParticle","heroEmitter","createHeroControlModule","pointed","keyboarded","destinationZone","turnTowardsPoint","zonedAction","removeAction","body","e","clientX","clientY","hasAction","precision","keyPoll","tickProvider","add","delta","down","start","startWalkToNextZone","br","min","max","collisions","updateCollisions","updateRender","Render","Game","config","productionTip","h","$mount","style"],"mappings":"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","file":"js/app.507b7961.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"wrap_container\",attrs:{\"id\":\"app\"}},[_c('game')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('render',{ref:\"render\",attrs:{\"particles\":_vm.particles,\"graphices\":_vm.graphices}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('canvas',{ref:\"canvas\"})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default class Graphics {\r\n    static BACKGROUND_COLOR = '#e5c29d';\r\n    static VENUE_BACKGROUND_COLOR = '#9f7d5b';\r\n\r\n    public x: number;\r\n    public y: number;\r\n    public radius: number;\r\n    public color: string;\r\n\r\n    constructor(x: number, y: number, radius: number, color: string = Graphics.VENUE_BACKGROUND_COLOR) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n    }\r\n}","\n\n\n\n\r\nimport { Component, Vue, Prop } from 'vue-property-decorator';\r\nimport Particle from '@/particles/particles/Particle2D';\r\nimport Graphics from './Graphics';\r\n\r\n@Component({\r\n  components: {}\r\n})\r\nexport default class Render extends Vue {\r\n    @Prop()particles!: Array<Array<Particle>>;\r\n    @Prop()graphices!: Array<Graphics>;\r\n\r\n    private render = true;\r\n    private circles: {[key: string]: HTMLCanvasElement} = {};\r\n\r\n    mounted() {\r\n        this.handelWindowResize();\r\n        window.addEventListener('resize', this.handelWindowResize);\r\n    }\r\n\r\n    destroyed() {\r\n        console.log('Game', 'destroyed')\r\n\r\n        window.removeEventListener('resize', this.handelWindowResize);\r\n    }\r\n\r\n    private handelWindowResize = (): void => {\r\n        this.canvas.width = window.innerWidth;\r\n        this.canvas.height = window.innerHeight;\r\n    }\r\n\r\n    private get canvas(): HTMLCanvasElement {\r\n        return (this.$refs.canvas as HTMLCanvasElement);\r\n    }\r\n\r\n    public update(time: number): void {\r\n        if (!this.particles || !this.render) {\r\n            return;\r\n        }\r\n        \r\n        const ctx: CanvasRenderingContext2D = this.canvas.getContext('2d')!;\r\n        ctx.fillStyle = Graphics.BACKGROUND_COLOR;\r\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        if (this.graphices) {\r\n            for (let i = 0; i < this.graphices.length; i++) {\r\n                const g: Graphics = this.graphices[i];\r\n                if (g.radius) {\r\n                    this.drawCircle(ctx, g.x, g.y, g.radius, g.color);\r\n                }\r\n            }\r\n        }\r\n        \r\n        for (let j = 0; j < this.particles.length; j++) {\r\n            \r\n            const particles: Array<Particle> = this.particles[j];\r\n            \r\n            for (let i = 0; i < particles.length; i++) {\r\n                const particle: Particle = particles[i];\r\n                this.drawCircle(ctx, particle.x, particle.y, particle.collisionRadius, particle.color);\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawCircle(ctx: CanvasRenderingContext2D, x: number, y: number, r: number, color: string): void {\r\n        const key = r + color;\r\n        if (!this.circles[key]) {\r\n            const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n            canvas.height = canvas.width = r * 2;\r\n            const context: CanvasRenderingContext2D = canvas.getContext('2d')!;\r\n            context.beginPath();\r\n            context.arc(r, r, r, 0, 2 * Math.PI, false);\r\n            context.fillStyle = color;\r\n            context.fill();\r\n\r\n            this.circles[key] = canvas;\r\n        }\r\n\r\n        const d = r * 2;\r\n        ctx.drawImage(this.circles[key]!, 0, 0, d, d, x - r, y - r, d, d);\r\n    }\r\n}\r\n\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Render.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Render.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Render.vue?vue&type=template&id=614be965&\"\nimport script from \"./Render.vue?vue&type=script&lang=ts&\"\nexport * from \"./Render.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\n\r\nexport default class Action {\r\n\r\n    protected _priority = 0;\r\n\r\n    public get priority(): number {\r\n        return this._priority;\r\n    }\r\n    public set priority(value: number) {\r\n        this._priority = value;\r\n    }\r\n\r\n    public removedFromEmitter(emitter: Emitter): void {\r\n        // console.log('action removedFromEmitter')\r\n    }\r\n\r\n    public addedToEmitter(emitter: Emitter): void {\r\n        // console.log('action addedToEmitter')\r\n    }\r\n\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        // console.log('action update')\r\n    }\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\n/*\r\n * Для использования с ZonedAction\r\n */\r\nexport default class ActionCallback extends Action {\r\n\r\n    private _callBack: Function;\r\n    private _once: boolean;\r\n    private _called = false;\r\n    \r\n    constructor(callBack: Function, once = false) {\r\n        super();\r\n        this._callBack = callBack;\r\n        this._once = once;\r\n    }\r\n\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        if (this._once && !this._called) {\r\n            this._callBack();\r\n        } else {\r\n            this._callBack();\r\n        }\r\n\r\n        this._called = true;\r\n    }\r\n}","export default class ParticleEvents {\r\n    static ZONE_COLLISION = \"zoneCollision\";\r\n    static BOUNDING_BOX_COLLISION = \"boundingBoxCollision\";\r\n}","/**\r\n * The BoundingBox action confines each particle to a rectangle region. The \r\n * particle bounces back off the sides of the rectangle when it reaches \r\n * the edge. The bounce treats the particle as a circular body. By default,\r\n * no energy is lost in the collision. This can be modified by setting the\r\n * bounce property to a value other than 1, its default value.\r\n * \r\n * This action has a priority of -20, so that it executes after \r\n * all movement has occured.\r\n */\r\n\r\nimport Emitter from \"../emitters/Emitter\";\r\nimport ParticleEvents from \"../events/ParticleEvents\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class BoundingBox extends Action {\r\n    private _left: number;\r\n    private _top: number;\r\n    private _right: number;\r\n    private _bottom: number;\r\n    private _bounce: number;\r\n\r\n    /**\r\n     * The constructor creates a BoundingBox action for use by \r\n     * an emitter. To add a BoundingBox to all particles created by an emitter, \r\n     * use the emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.common.emitters.Emitter#addAction()\r\n     * \r\n     * @param left The left coordinate of the box.\r\n     * @param top The top coordinate of the box.\r\n     * @param right The right coordinate of the box.\r\n     * @param bottom The bottom coordinate of the box.\r\n     * @param bounce The coefficient of restitution when the particles bounce off the\r\n     * sides of the box. A value of 1 gives a pure elastic collision, with no energy loss. \r\n     * A value between 0 and 1 causes the particle to loose enegy in the collision. A value \r\n     * greater than 1 causes the particle to gain energy in the collision.\r\n     */\r\n    constructor(left = 0, top = 0, right = 0, bottom = 0, bounce = 1) {\r\n        super();\r\n        this.priority = -20;\r\n        this._left = left;\r\n        this._top = top;\r\n        this._right = right;\r\n        this._bottom = bottom;\r\n        this._bounce = bounce;\r\n    }\r\n\r\n    /**\r\n     * The left coordinate of the bounding box.\r\n     */\r\n    public get left(): number {\r\n        return this._left;\r\n    }\r\n    public set left(value: number) {\r\n        this._left = value;\r\n    }\r\n\r\n    /**\r\n     * The top coordinate of the bounding box.\r\n     */\r\n    public get top(): number {\r\n        return this._top;\r\n    }\r\n    public set top(value: number) {\r\n        this._top = value;\r\n    }\r\n\r\n    /**\r\n     * The left coordinate of the bounding box.\r\n     */\r\n    public get right(): number {\r\n        return this._right;\r\n    }\r\n    public set right(value: number) {\r\n        this._right = value;\r\n    }\r\n\r\n    /**\r\n     * The left coordinate of the bounding box.\r\n     */\r\n    public get bottom(): number {\r\n        return this._bottom;\r\n    }\r\n    public set bottom(value: number) {\r\n        this._bottom = value;\r\n    }\r\n\r\n    /**\r\n     * The coefficient of restitution when the particles bounce off the\r\n     * sides of the box. A value of 1 gives a pure pure elastic collision, with no energy loss. \r\n     * A value between 0 and 1 causes the particle to loose enegy in the collision. A value \r\n     * greater than 1 causes the particle to gain energy in the collision.\r\n     */\r\n    public get bounce(): number {\r\n        return this._bounce;\r\n    }\r\n    public set bounce(value: number) {\r\n        this._bounce = value;\r\n    }\r\n\r\n    /**\r\n     * Tests whether the particle is at the edge of the box and, if so,\r\n     * adjusts its velocity to bounce in back towards the center of the\r\n     * box.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        const p: Particle = particle;\r\n        const radius = particle.collisionRadius;\r\n        let collide = false;\r\n        let position;\r\n        if (p.velX > 0 && (position = p.x + radius) >= this._right) {\r\n            p.velX = -p.velX * this._bounce;\r\n            p.x += 2 * (this._right - position);\r\n            collide = true;\r\n        }\r\n        else if (p.velX < 0 && (position = p.x - radius) <= this._left) {\r\n            p.velX = -p.velX * this._bounce;\r\n            p.x += 2 * (this._left - position);\r\n            collide = true;\r\n        }\r\n        if (p.velY > 0 && (position = p.y + radius) >= this._bottom) {\r\n            p.velY = -p.velY * this._bounce;\r\n            p.y += 2 * (this._bottom - position);\r\n            collide = true;\r\n        }\r\n        else if (p.velY < 0 && (position = p.y - radius) <= this._top) {\r\n            p.velY = -p.velY * this._bounce;\r\n            p.y += 2 * (this._top - position);\r\n            collide = true;\r\n        }\r\n\r\n        if (collide && emitter.hasEventListener(ParticleEvents.BOUNDING_BOX_COLLISION)) {\r\n            const options = {detail: {\r\n                particle: particle,\r\n                action: this\r\n            }};\r\n            emitter.dispatchEvent(new CustomEvent(ParticleEvents.BOUNDING_BOX_COLLISION, options));\r\n        }\r\n    }\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport ParticleEvents from \"../events/ParticleEvents\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport { Zone2D } from \"../zones/Zone2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class CollisionZone extends Action {\r\n    private _bounce: number;\r\n    private _zone: Zone2D;\r\n\r\n    /**\r\n     * The constructor creates a CollisionZone action for use by  an emitter.\r\n     * To add a CollisionZone to all particles managed by an emitter, use the\r\n     * emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.common.emitters.Emitter#addAction()\r\n     * \r\n     * @param zone The zone that the particles should collide with.\r\n     * @param bounce The coefficient of restitution when the particles collide. \r\n     * A value of 1 gives a pure elastic collision, with no energy loss. A \r\n     * value between 0 and 1 causes the particles to loose enegy in the \r\n     * collision. A value greater than 1 causes the particle to gain energy \r\n     * in the collision.\r\n     */\r\n    constructor(zone: Zone2D, bounce = 1) {\r\n        super();\r\n        this.priority = -30;\r\n        this._bounce = bounce;\r\n        this._zone = zone;\r\n    }\r\n\r\n    /**\r\n     * The zone that the particles should collide with.\r\n     */\r\n    public get zone(): Zone2D {\r\n        return this._zone;\r\n    }\r\n    public set zone(value: Zone2D) {\r\n        this._zone = value;\r\n    }\r\n\r\n    /**\r\n     * The coefficient of restitution when the particles collide. A value of \r\n     * 1 gives a pure elastic collision, with no energy loss. A value\r\n     * between 0 and 1 causes the particles to loose enegy in the collision. \r\n     * A value greater than 1 causes the particles to gain energy in the collision.\r\n     */\r\n    public get bounce(): number {\r\n        return this._bounce;\r\n    }\r\n    public set bounce(value: number) {\r\n        this._bounce = value;\r\n    }\r\n\r\n    /**\r\n     * Checks for collisions between the particle and the zone.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user.</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        const collide = this._zone.collideParticle(particle, this._bounce);\r\n        if (collide && emitter.hasEventListener(ParticleEvents.ZONE_COLLISION)) {\r\n            const options = {detail: {\r\n                particle: particle,\r\n                action: this\r\n            }};\r\n            emitter.dispatchEvent(new CustomEvent(ParticleEvents.ZONE_COLLISION, options));\r\n        }\r\n    }\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class Move extends Action {\r\n\t\tconstructor () {\r\n            super();\r\n\t\t\tthis.priority = -10;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Updates the particle's position based on its velocity and the period of \r\n\t\t * time indicated.\r\n\t\t * \r\n\t\t * <p>This method is called by the emitter and need not be called by the \r\n\t\t * user.</p>\r\n\t\t * \r\n\t\t * @param emitter The Emitter that created the particle.\r\n\t\t * @param particle The particle to be updated.\r\n\t\t * @param time The duration of the frame - used for time based updates.\r\n\t\t * \r\n\t\t * @see org.flintparticles.common.actions.Action#update()\r\n\t\t */\r\n\t\tpublic update( emitter: Emitter, particle: Particle, time: number ): void {\r\n\t\t\tparticle.previousX = particle.x;\r\n\t\t\tparticle.previousY = particle.y;\r\n\t\t\tparticle.x += particle.velX * time;\r\n\t\t\tparticle.y += particle.velY * time;\r\n\t\t}\r\n\t}","/**\r\n * The SpeedLimit action limits each particle's maximum or minimum speed to the \r\n * specified speed.\r\n * \r\n * <p>This action has aa priority of -5, so that it executes after all accelerations \r\n * have occured.</p>\r\n */\r\n\r\nimport Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class SpeedLimit extends Action\r\n{\r\n    private _limit:number;\r\n    private _limitSq:number;\r\n    private _isMinimum:boolean;\r\n    \r\n    /**\r\n     * The constructor creates a SpeedLimit action for use by an emitter. \r\n     * To add a SpeedLimit to all particles created by an emitter, use the\r\n     * emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.common.emitters.Emitter#addAction()\r\n     * \r\n     * @param speed The speed limit for the action in pixels per second.\r\n     * @param isMinimum If true, particles travelling slower than the speed limit\r\n     * are accelerated to the speed limit, otherwise particles travelling faster\r\n     * than the speed limit are decelerated to the speed limit.\r\n     */\r\n    constructor( speed = Number.MAX_VALUE, isMinimum = false )\r\n    {\r\n        super();\r\n        this.priority = -5;\r\n        this._limit = speed;\r\n        this._limitSq = speed * speed;\r\n        this._isMinimum = isMinimum;\r\n    }\r\n    \r\n    /**\r\n     * The speed limit\r\n     */\r\n    public get limit():number\r\n    {\r\n        return this._limit;\r\n    }\r\n    public set limit( value:number )\r\n    {\r\n        this._limit = value;\r\n        this._limitSq = value * value;\r\n    }\r\n    \r\n    /**\r\n     * Whether the speed is a minimum (true) or maximum (false) speed.\r\n     */\r\n    public get isMinimum():boolean\r\n    {\r\n        return this._isMinimum;\r\n    }\r\n    public set isMinimum( value:boolean )\r\n    {\r\n        this._isMinimum = value;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the particle's speed is above or below the speed limit\r\n     * as appropriate and, if so, alters its speed to match the speed limit.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user.</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update( emitter:Emitter, particle:Particle, time:number ):void\r\n    {\r\n        const speedSq = particle.velX * particle.velX + particle.velY * particle.velY;\r\n        if ( ( this._isMinimum && speedSq < this._limitSq ) || ( !this._isMinimum && speedSq > this._limitSq ) )\r\n        {\r\n            const scale = this._limit / Math.sqrt( speedSq );\r\n            particle.velX *= scale;\r\n            particle.velY *= scale;\r\n        }\r\n    }\r\n}","import Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class TurnTowardsPoint extends Action {\r\n    private _x: number;\r\n    private _y: number;\r\n    private _power: number;\r\n\r\n    /**\r\n     * The constructor creates a TurnTowardsPoint action for use by an emitter. \r\n     * To add a TurnTowardsPoint to all particles created by an emitter, use the\r\n     * emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.common.emitters.Emitter#addAction()\r\n     * \r\n     * @param power The strength of the turn action. Higher values produce a sharper turn.\r\n     * @param x The x coordinate of the point towards which the particle turns.\r\n     * @param y The y coordinate of the point towards which the particle turns.\r\n     */\r\n    constructor(x = 0, y = 0, power = 0) {\r\n        super();\r\n        this._power = power;\r\n        this._x = x;\r\n        this._y = y;\r\n    }\r\n\r\n    /**\r\n     * The strength of the turn action. Higher values produce a sharper turn.\r\n     */\r\n    public get power(): number {\r\n        return this._power;\r\n    }\r\n    public set power(value: number) {\r\n        this._power = value;\r\n    }\r\n\r\n    /**\r\n     * The x coordinate of the point that the particle turns towards.\r\n     */\r\n    public get x(): number {\r\n        return this._x;\r\n    }\r\n    public set x(value: number) {\r\n        this._x = value;\r\n    }\r\n\r\n    /**\r\n     * The y coordinate of the point that the particle turns towards.\r\n     */\r\n    public get y(): number {\r\n        return this._y;\r\n    }\r\n    public set y(value: number) {\r\n        this._y = value;\r\n    }\r\n\r\n    /**\r\n     * Calculates the direction to the focus point and turns the particle towards \r\n     * this direction.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user.</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        const velLength = Math.sqrt(particle.velX * particle.velX + particle.velY * particle.velY);\r\n        const dx = particle.velX / velLength;\r\n        const dy = particle.velY / velLength;\r\n        const acc = this.power * time;\r\n        let targetX = this._x - particle.x;\r\n        let targetY = this._y - particle.y;\r\n        const len = Math.sqrt(targetX * targetX + targetY * targetY);\r\n        if (len == 0) {\r\n            return;\r\n        }\r\n        targetX /= len;\r\n        targetY /= len;\r\n        const dot = targetX * dx + targetY * dy;\r\n        const perpX = targetX - dx * dot;\r\n        const perpY = targetY - dy * dot;\r\n        let factor = acc / Math.sqrt(perpX * perpX + perpY * perpY);\r\n        particle.velX += perpX * factor;\r\n        particle.velY += perpY * factor;\r\n        factor = velLength / Math.sqrt(particle.velX * particle.velX + particle.velY * particle.velY);\r\n        particle.velX *= factor;\r\n        particle.velY *= factor;\r\n    }\r\n}","/**\r\n     * The ZonedAction Action applies an action to the particle only if it is in \r\n     * the specified zone. \r\n     */\r\n\r\nimport Emitter from \"../emitters/Emitter\";\r\nimport Particle from \"../particles/Particle2D\";\r\nimport { Zone2D } from \"../zones/Zone2D\";\r\nimport Action from \"./Action\";\r\n\r\nexport default class ZonedAction extends Action {\r\n    private _action: Action;\r\n    private _zone: Zone2D;\r\n    private _invert: boolean;\r\n\r\n    /**\r\n     * The constructor creates a ZonedAction action for use by an emitter. \r\n     * To add a ZonedAction to all particles created by an emitter, use the\r\n     * emitter's addAction method.\r\n     * \r\n     * @see org.flintparticles.emitters.Emitter#addAction()\r\n     * \r\n     * @param action The action to apply when inside the zone.\r\n     * @param zone The zone in which to apply the action.\r\n     * @param invertZone If false (the default) the action is applied only to \r\n     * particles inside the zone. If true the action is applied only to \r\n     * particles outside the zone.\r\n     */\r\n    constructor(action: Action, zone: Zone2D, invertZone = false) {\r\n        super();\r\n        this._action = action;\r\n        this._zone = zone;\r\n        this._invert = invertZone;\r\n    }\r\n\r\n    /**\r\n     * The action to apply when inside the zone.\r\n     */\r\n    public get action(): Action {\r\n        return this._action;\r\n    }\r\n    public set action(value: Action) {\r\n        this._action = value;\r\n    }\r\n\r\n    /**\r\n     * The zone in which to apply the acceleration.\r\n     */\r\n    public get zone(): Zone2D {\r\n        return this._zone;\r\n    }\r\n    public set zone(value: Zone2D) {\r\n        this._zone = value;\r\n    }\r\n\r\n    /**\r\n     * If false (the default), the action is applied only to particles inside \r\n     * the zone. If true, the action is applied only to particles outside the zone.\r\n     */\r\n    public get invertZone(): boolean {\r\n        return this._invert;\r\n    }\r\n    public set invertZone(value: boolean) {\r\n        this._invert = value;\r\n    }\r\n\r\n    /**\r\n     * Provides acces to the priority of the action being used.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#getDefaultPriority()\r\n     */\r\n    public get priority(): number {\r\n        return this._action.priority;\r\n    }\r\n    public set priority(value: number) {\r\n        this._action.priority = value;\r\n    }\r\n\r\n    /**\r\n     * Calls the addedToEmitter method of the action being used.\r\n     * \r\n     * @param emitter The emitter this action has been added to.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#addedToEmitter()\r\n     */\r\n    public addedToEmitter(emitter: Emitter): void {\r\n        this._action.addedToEmitter(emitter);\r\n    }\r\n\r\n    /**\r\n     * Calls the removedFromEmitter method of the action being used.\r\n     * \r\n     * @param emitter The emitter this action has been added to.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#removedFromEmitter()\r\n     */\r\n    public removedFromEmitter(emitter: Emitter): void {\r\n        this._action.removedFromEmitter(emitter);\r\n    }\r\n\r\n    /**\r\n     * Checks if the particle is in the zone and if so calls the update\r\n     * method of the action being used.\r\n     * \r\n     * <p>This method is called by the emitter and need not be called by the \r\n     * user.</p>\r\n     * \r\n     * @param emitter The Emitter that created the particle.\r\n     * @param particle The particle to be updated.\r\n     * @param time The duration of the frame - used for time based updates.\r\n     * \r\n     * @see org.flintparticles.common.actions.Action#update()\r\n     */\r\n    public update(emitter: Emitter, particle: Particle, time: number): void {\r\n        if (this._zone.contains(particle.x, particle.y)) {\r\n            if (!this._invert) {\r\n                this._action.update(emitter, particle, time);\r\n            }\r\n        }\r\n        else {\r\n            if (this._invert) {\r\n                this._action.update(emitter, particle, time);\r\n            }\r\n        }\r\n    }\r\n}","import Emitter from '../emitters/Emitter';\r\nimport Counter from './Counter';\r\n\r\nexport default class ZeroCounter implements Counter {\r\n    \r\n    /**\r\n     * Returns 0 to indicate that the emitter should emit no particles when it\r\n     * starts.\r\n     * \r\n     * <p>This method is called within the emitter's start method \r\n     * and need not be called by the user.</p>\r\n     * \r\n     * @param emitter The emitter.\r\n     * @return 0\r\n     * \r\n     * @see org.flintparticles.common.counters.Counter#startEmitter()\r\n     */\r\n    public startEmitter(emitter: Emitter): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns 0 to indicate that the emitter should emit no particles.\r\n     * \r\n     * <p>This method is called within the emitter's update loop and need not\r\n     * be called by the user.</p>\r\n     * \r\n     * @param emitter The emitter.\r\n     * @param time The time, in seconds, since the previous call to this method.\r\n     * @return 0\r\n     * \r\n     * @see org.flintparticles.common.counters.Counter#updateEmitter()\r\n     */\r\n    public updateEmitter(emitter: Emitter, time: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Does nothing\r\n     */\r\n    public stop(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Does nothing\r\n     */\r\n    public resume(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the counter has emitted all its particles. For the ZeroCounter\r\n     * this will always be true.\r\n     */\r\n    public get complete(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the counter is currently emitting particles\r\n     */\r\n    public get running(): boolean {\r\n        return false;\r\n    }\r\n}","/*\r\n * FLINT PARTICLE SYSTEM\r\n * .....................\r\n * \r\n * Author: Richard Lord\r\n * Copyright (c) Richard Lord 2008-2011\r\n * http://flintparticles.org\r\n * \r\n */\r\n\r\nimport Action from \"../actions/Action\";\r\nimport Counter from \"../counters/Counter\";\r\nimport ZeroCounter from \"../counters/ZeroCounter\";\r\nimport Particle from \"../particles/Particle2D\";\r\n\r\nexport default class Emitter {\r\n\r\n    protected _counter: Counter = new ZeroCounter();\r\n    protected _actions: Array<Action> = [];\r\n    protected _particles: Array<any> = [];\r\n\r\n    protected _maximumFrameTime = 0.1;\r\n\r\n    protected _running = false;\r\n\r\n    private _eventTypes: {[key: string]: number} = {};\r\n    private _eventDispatcher: HTMLElement;\r\n\r\n    constructor() {\r\n        this._eventDispatcher = document.createElement('div');\r\n    }\r\n\r\n    public addEventListener(type: string, callback: EventListenerOrEventListenerObject): void {\r\n        this._eventTypes[type] = this._eventTypes[type] ? this._eventTypes[type] + 1 : 1;\r\n        this._eventDispatcher.addEventListener(type, callback);\r\n    }\r\n\r\n    public removeEventListener(type: string, callback: EventListenerOrEventListenerObject): void {\r\n        this._eventTypes[type] = this._eventTypes[type] && this._eventTypes[type] > 1 ? this._eventTypes[type] - 1 : 0;\r\n        this._eventDispatcher.removeEventListener(type, callback);\r\n    }\r\n\r\n    public hasEventListener(type: string): boolean {\r\n        return !!this._eventTypes[type];\r\n    }\r\n\r\n    public dispatchEvent(event: CustomEvent): void {\r\n        this._eventDispatcher.dispatchEvent(event);\r\n    }\r\n\r\n    public get counter(): Counter {\r\n        return this._counter;\r\n    }\r\n    public set counter(value: Counter) {\r\n        this._counter = value;\r\n        if (this._running) {\r\n            this._counter.startEmitter(this);\r\n        }\r\n    }\r\n\r\n    public get actions(): Array<Action> {\r\n        return this._actions;\r\n    }\r\n    public set actions(value: Array<Action>) {\r\n        while (this._actions.length) {\r\n            this._actions.pop()?.removedFromEmitter(this);\r\n        }\r\n\r\n        this._actions = value.slice();\r\n        this._actions.sort(this.prioritySort);\r\n\r\n        this._actions.map((action: Action) => {\r\n            action.addedToEmitter(this);\r\n        });\r\n    }\r\n\r\n    public addAction(action: Action): void {\r\n        const len = this._actions.length;\r\n        let i = 0;\r\n        for (i = 0; i < len; ++i) {\r\n            if (this._actions[i].priority < action.priority) {\r\n                break;\r\n            }\r\n        }\r\n        this._actions.splice(i, 0, action);\r\n        action.addedToEmitter(this);\r\n    }\r\n\r\n    /**\r\n     * Removes an Action from the Emitter.\r\n     * \r\n     * @param action The Action to remove\r\n     * \r\n     * @see addAction()\r\n     */\r\n    public removeAction(action: Action): void {\r\n        const index = this._actions.indexOf(action);\r\n        if (index != -1) {\r\n            this._actions.splice(index, 1);\r\n            action.removedFromEmitter(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detects if the emitter is using a particular action or not.\r\n     * \r\n     * @param action The action to look for.\r\n     * \r\n     * @return true if the action is being used by the emitter, false \r\n     * otherwise.\r\n     */\r\n    public hasAction(action: Action): boolean {\r\n        return this._actions.indexOf(action) != -1;\r\n    }\r\n\r\n    public get particles(): Array<Particle> {\r\n        return this._particles;\r\n    }\r\n\r\n    public set particles(value: Array<Particle>) {\r\n        this.killAllParticles();\r\n        this.addParticles(value);\r\n    }\r\n\r\n    public addParticle(particle: Particle): void {\r\n        this._particles.push(particle);\r\n    }\r\n\r\n    public addParticles(particles: Array<Particle>): void {\r\n        this._particles.splice(this._particles.length, 0, particles);\r\n    }\r\n\r\n    public removeParticle(particle: Particle): boolean {\r\n        const index = this._particles.indexOf(particle);\r\n        if (index != -1) {\r\n            this._particles.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public removeParticles(particles: Array<Particle>): void {\r\n        for (let i = 0; i < particles.length; i++) {\r\n            this.removeParticle(particles[i]);\r\n        }\r\n    }\r\n\r\n    public killAllParticles(): void {\r\n        this._particles.splice(0);\r\n    }\r\n\r\n    private prioritySort(b1: Action, b2: Action): number {\r\n        return b1.priority - b2.priority;\r\n    }\r\n\r\n    public update(time: number): void {\r\n        if (time > this._maximumFrameTime) {\r\n            time = this._maximumFrameTime;\r\n        }\r\n\r\n        // sortParticles();\r\n\r\n        if (this._particles.length == 0) {\r\n            return;\r\n        }\r\n\r\n        // update particle state\r\n        for (let j = 0; j < this._actions.length; j++) {\r\n            for (let i = 0; i < this._particles.length; i++) {\r\n                this._actions[j].update(this, this._particles[i], time);\r\n            }\r\n        }\r\n\r\n        // remove dead particles\r\n        const length = this._particles.length;\r\n        for (let i = length; i--;) {\r\n            const particle: Particle = this._particles[i];\r\n            if (particle.isDead) {\r\n                this._particles.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n}","/**\r\n * The Particle class is a set of public properties shared by all particles.\r\n * It is deliberately lightweight, with only one method. The Initializers\r\n * and Actions modify these properties directly. This means that the same\r\n * particles can be used in many different emitters, allowing Particle \r\n * objects to be reused.\r\n * \r\n * Particles are usually created by the ParticleCreator class. This class\r\n * just simplifies the reuse of Particle objects which speeds up the\r\n * application. \r\n */\r\nexport default class Particle {\r\n    /**\r\n     * The 32bit ARGB color of the particle. The initial value is 0xFFFFFFFF (white).\r\n     */\r\n    public color = '#ffffff';\r\n\r\n    //  private _colorTransform:ColorTransform = null;\r\n    private _previousColor: string;\r\n\r\n    /**\r\n     * The scale of the particle ( 1 is normal size ).\r\n     */\r\n    public scale = 1;\r\n\r\n    /**\r\n     * The mass of the particle ( 1 is the default ).\r\n     */\r\n    public mass = 1;\r\n\r\n    /**\r\n     * The radius of the particle, for collision approximation\r\n     */\r\n    public collisionRadius = 1;\r\n\r\n    /**\r\n     * The object used to display the image. In a 2D particle, this is usually\r\n     * a DisplayObject. In a 3D particle, this may be a DisplayObject, for \r\n     * displaying on a billboard or similar, or a 3D object in the form used\r\n     * by the render system.\r\n     */\r\n    //  public image:* = null;\r\n\r\n    /**\r\n     * The lifetime of the particle, in seconds.\r\n     */\r\n    public lifetime = 0;\r\n    /**\r\n     * The age of the particle, in seconds.\r\n     */\r\n    public age = 0;\r\n    /**\r\n     * The energy of the particle.\r\n     */\r\n    public energy = 1;\r\n\r\n    /**\r\n     * Whether the particle is dead and should be removed from the stage.\r\n     */\r\n    public isDead = false;\r\n\r\n    /**\r\n     * The dictionary object enables actions and activities to add additional properties to the particle.\r\n     * Any object adding properties to the particle should use a reference to itself as the dictionary\r\n     * key, thus ensuring it doesn't clash with other object's properties. If multiple properties are\r\n     * needed, the dictionary value can be an object with a number of properties.\r\n     */\r\n    //  public get dictionary(): Dictionary\r\n    //  {\r\n    //      if( _dictionary == null )\r\n    //      {\r\n    //          _dictionary = new Dictionary( true );\r\n    //      }\r\n    //      return _dictionary;\r\n    //  }\r\n    //  private _dictionary:Dictionary = null;\r\n\r\n    /**\r\n     * Creates a particle. Alternatively particles can be reused by using the ParticleCreator to create\r\n     * and manage them. Usually the emitter will create the particles and the user doesn't need\r\n     * to create them.\r\n     */\r\n    constructor() {\r\n        this._previousColor = this.color;\r\n    }\r\n\r\n    /**\r\n     * Sets the particle's properties to their default values.\r\n     */\r\n    public initialize(): void {\r\n        this.color = '#ffffff';\r\n        this.scale = 1;\r\n        this.mass = 1;\r\n        this.collisionRadius = 1;\r\n        this.lifetime = 0;\r\n        this.age = 0;\r\n        this.energy = 1;\r\n        this.isDead = false;\r\n\r\n        //  image = null;\r\n        //  _dictionary = null;\r\n        //  _colorTransform = null;\r\n    }\r\n\r\n    /**\r\n     * A ColorTransform object that converts white to the colour of the particle.\r\n     */\r\n    //  public get colorTransform():ColorTransform\r\n    //  {\r\n    //      if( !_colorTransform || _previousColor != color )\r\n    //      {\r\n    //          _colorTransform = new ColorTransform( ( ( color >>> 16 ) & 255 ) / 255,\r\n    //                                 ( ( color >>> 8 ) & 255 ) / 255,\r\n    //                                 ( ( color ) & 255 ) / 255,\r\n    //                                 ( ( color >>> 24 ) & 255 ) / 255,\r\n    //                                 0,0,0,0 );\r\n    //          _previousColor = color;\r\n    //      }\r\n    //      return _colorTransform;\r\n    //  }\r\n\r\n    // public get alpha(): number {\r\n    //     return ((this.color & 0xFF000000) >>> 24) / 255;\r\n    // }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    protected cloneInto(p: Particle): Particle {\r\n        p.color = this.color;\r\n        p.scale = this.scale;\r\n        p.mass = this.mass;\r\n        p.collisionRadius = this.collisionRadius;\r\n        p.lifetime = this.lifetime;\r\n        p.age = this.age;\r\n        p.energy = this.energy;\r\n        p.isDead = this.isDead;\r\n        //  p.image = image;\r\n        //  if( _dictionary )\r\n        //  {\r\n        //      p._dictionary = new Dictionary( true );\r\n        //      for( key:Object in _dictionary )\r\n        //      {\r\n        //          p._dictionary[ key ] = _dictionary[ key ];\r\n        //      }\r\n        //  }\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Creates a new particle with all the same properties as this one.\r\n     * \r\n     * <p>Note that the new particle will use the same image object as the one you're cloning.\r\n     * This is fine if the particles are used with a Bitmaprenderer, but if they are used with a \r\n     * DisplayObjectRenderer you will need to replace teh image property with a new image, otherwise\r\n     * only one of the particles (original or clone) will be displayed.</p>\r\n     */\r\n    public clone(): Particle {\r\n        return this.cloneInto(new Particle());\r\n    }\r\n\r\n    public revive(): void {\r\n        this.lifetime = 0;\r\n        this.age = 0;\r\n        this.energy = 1;\r\n        this.isDead = false;\r\n    }\r\n}","import Particle from \"./Particle\";\r\n\r\nexport default class Particle2D extends Particle {\r\n\r\n    public x = 0;\r\n    public y = 0;\r\n    public previousX = 0;\r\n    public previousY = 0;\r\n    public velX = 0;\r\n    public velY = 0;\r\n    public rotation = 0;\r\n    public angVelocity = 0;\r\n\r\n    /**\r\n     * The position in the emitter's horizontal spacial sorted array\r\n     */\r\n    public sortID = -1;\r\n    \r\n    \r\n    private _previousMass;\r\n    private _previousRadius;\r\n    private _inertia;\r\n\r\n    /**\r\n     * The moment of inertia of the particle about its center point\r\n     */\r\n    public get inertia(): number {\r\n        if (this.mass != this._previousMass || this.collisionRadius != this._previousRadius) {\r\n            this._inertia = this.mass * this.collisionRadius * this.collisionRadius * 0.5;\r\n            this._previousMass = this.mass;\r\n            this._previousRadius = this.collisionRadius;\r\n        }\r\n        return this._inertia;\r\n    }\r\n}","/**\r\n * The CircleZone zone defines a circular zone. The zone may\r\n * have a hole in the middle, like a doughnut.\r\n */\r\n\r\nimport Particle2D from \"../particles/Particle2D\";\r\nimport { Point, Zone2D } from \"./Zone2D\";\r\n\r\nexport default class CircleZone implements Zone2D {\r\n    protected _center: Point;\r\n    protected _outerRadius: number;\r\n    protected _outerSq: number;\r\n\r\n    protected static TWOPI = Math.PI * 2;\r\n\r\n    /**\r\n     * The constructor defines a CircleZone zone.\r\n     * \r\n     * @param center The centre of the disc.\r\n     * @param outerRadius The radius of the outer edge of the disc.\r\n     * @param innerRadius If set, this defines the radius of the inner\r\n     * edge of the disc. Points closer to the center than this inner radius\r\n     * are excluded from the zone. If this parameter is not set then all \r\n     * points inside the outer radius are included in the zone.\r\n     */\r\n    constructor(center: Point, outerRadius = 0) {\r\n        if (center == null) {\r\n            this._center = { x: 0, y: 0 };\r\n        }\r\n        else {\r\n            this._center = center;\r\n        }\r\n        this._outerRadius = outerRadius;\r\n        this._outerSq = this._outerRadius * this._outerRadius;\r\n    }\r\n\r\n    /**\r\n     * The centre of the disc.\r\n     */\r\n    public get center(): Point {\r\n        return this._center;\r\n    }\r\n\r\n    public set center(value: Point) {\r\n        this._center = value;\r\n    }\r\n\r\n    /**\r\n     * The x coordinate of the point that is the center of the disc.\r\n     */\r\n    public get centerX(): number {\r\n        return this._center.x;\r\n    }\r\n\r\n    public set centerX(value: number) {\r\n        this._center.x = value;\r\n    }\r\n\r\n    /**\r\n     * The y coordinate of the point that is the center of the disc.\r\n     */\r\n    public get centerY(): number {\r\n        return this._center.y;\r\n    }\r\n\r\n    public set centerY(value: number) {\r\n        this._center.y = value;\r\n    }\r\n\r\n    /**\r\n     * The radius of the outer edge of the disc.\r\n     */\r\n    public get outerRadius(): number {\r\n        return this._outerRadius;\r\n    }\r\n\r\n    public set outerRadius(value: number) {\r\n        this._outerRadius = value;\r\n        this._outerSq = this._outerRadius * this._outerRadius;\r\n    }\r\n\r\n    /**\r\n     * The contains method determines whether a point is inside the zone.\r\n     * This method is used by the initializers and actions that\r\n     * use the zone. Usually, it need not be called directly by the user.\r\n     * \r\n     * @param x The x coordinate of the location to test for.\r\n     * @param y The y coordinate of the location to test for.\r\n     * @return true if point is inside the zone, false if it is outside.\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        x -= this._center.x;\r\n        y -= this._center.y;\r\n        const distSq = x * x + y * y;\r\n        return distSq <= this._outerSq;// && distSq >= this._innerSq;\r\n    }\r\n\r\n    /**\r\n     * The getLocation method returns a random point inside the zone.\r\n     * This method is used by the initializers and actions that\r\n     * use the zone. Usually, it need not be called directly by the user.\r\n     * \r\n     * @return a random point inside the zone.\r\n     */\r\n    public getLocation(): Point {\r\n        const rand = Math.random();\r\n        const point: Point = this.getPolar(0 + (1 - rand * rand) * (this._outerRadius - 0), Math.random() * CircleZone.TWOPI);\r\n        point.x += this._center.x;\r\n        point.y += this._center.y;\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * The getArea method returns the size of the zone.\r\n     * This method is used by the MultiZone class. Usually, \r\n     * it need not be called directly by the user.\r\n     * \r\n     * @return a random point inside the zone.\r\n     */\r\n    public getArea(): number {\r\n        return Math.PI * (this._outerSq - 0);\r\n    }\r\n\r\n    /**\r\n     * Manages collisions between a particle and the zone. The particle will collide with the edges of\r\n     * the disc defined for this zone, from inside or outside the disc.  The collisionRadius of the \r\n     * particle is used when calculating the collision.\r\n     * \r\n     * @param particle The particle to be tested for collision with the zone.\r\n     * @param bounce The coefficient of restitution for the collision.\r\n     * \r\n     * @return Whether a collision occured.\r\n     */\r\n    public collideParticle(particle: Particle2D, bounce = 1): boolean {\r\n        let outerLimit = 0;\r\n        let outerLimitSq = 0;\r\n        let distanceSq = 0;\r\n        let distance = 0;\r\n        let pdx = 0;\r\n        let pdy = 0;\r\n        let pDistanceSq = 0;\r\n        let adjustSpeed = 0;\r\n        let positionRatio = 0;\r\n        const epsilon = 0.001;\r\n        const dx = particle.x - this._center.x;\r\n        const dy = particle.y - this._center.y;\r\n        let dotProduct = particle.velX * dx + particle.velY * dy;\r\n        dotProduct = dotProduct > 0 ?\r\n            -1 * dotProduct :\r\n            dotProduct == 0 ? -.001 : dotProduct;\r\n\r\n        outerLimit = this._outerRadius + particle.collisionRadius;\r\n        if (Math.abs(dx) > outerLimit) return false;\r\n        if (Math.abs(dy) > outerLimit) return false;\r\n        distanceSq = dx * dx + dy * dy;\r\n        outerLimitSq = outerLimit * outerLimit;\r\n        if (distanceSq > outerLimitSq) return false;\r\n        // Particle is inside outer circle\r\n\r\n        pdx = particle.previousX - this._center.x;\r\n        pdy = particle.previousY - this._center.y;\r\n        pDistanceSq = pdx * pdx + pdy * pdy;\r\n        if (pDistanceSq > outerLimitSq) {\r\n            // particle was outside outer circle\r\n            adjustSpeed = (1 + bounce) * dotProduct / distanceSq;\r\n            particle.velX -= adjustSpeed * dx;\r\n            particle.velY -= adjustSpeed * dy;\r\n            distance = Math.sqrt(distanceSq);\r\n            positionRatio = (2 * outerLimit - distance) / distance + epsilon;\r\n            particle.x = this._center.x + dx * positionRatio;\r\n            particle.y = this._center.y + dy * positionRatio;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected getPolar(r: number, theta: number): Point {\r\n        return {\r\n            x: r * Math.cos(theta),\r\n            y: r * Math.sin(theta)\r\n        }\r\n    }\r\n}","import Particle from \"../particles/Particle2D\";\r\nimport { Point, Zone2D } from \"./Zone2D\";\r\n\r\nexport default class RectangleZone implements Zone2D {\r\n    private _left: number;\r\n    private _top: number;\r\n    private _right: number;\r\n    private _bottom: number;\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    /**\r\n     * The constructor creates a RectangleZone zone.\r\n     * \r\n     * @param left The left coordinate of the rectangle defining the region of the zone.\r\n     * @param top The top coordinate of the rectangle defining the region of the zone.\r\n     * @param right The right coordinate of the rectangle defining the region of the zone.\r\n     * @param bottom The bottom coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    constructor(left = 0, top = 0, right = 0, bottom = 0) {\r\n        this._left = left;\r\n        this._top = top;\r\n        this._right = right;\r\n        this._bottom = bottom;\r\n        this._width = right - left;\r\n        this._height = bottom - top;\r\n    }\r\n\r\n    /**\r\n     * The left coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    public get left(): number {\r\n        return this._left;\r\n    }\r\n\r\n    public set left(value: number) {\r\n        this._left = value;\r\n        if (!isNaN(this._right) && !isNaN(this._left)) {\r\n            this._width = this.right - this.left;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The right coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    public get right(): number {\r\n        return this._right;\r\n    }\r\n\r\n    public set right(value: number) {\r\n        this._right = value;\r\n        if (!isNaN(this._right) && !isNaN(this._left)) {\r\n            this._width = this.right - this.left;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The top coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    public get top(): number {\r\n        return this._top;\r\n    }\r\n\r\n    public set top(value: number) {\r\n        this._top = value;\r\n        if (!isNaN(this._top) && !isNaN(this._bottom)) {\r\n            this._height = this.bottom - this.top;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The bottom coordinate of the rectangle defining the region of the zone.\r\n     */\r\n    public get bottom(): number {\r\n        return this._bottom;\r\n    }\r\n\r\n    public set bottom(value: number) {\r\n        this._bottom = value;\r\n        if (!isNaN(this._top) && !isNaN(this._bottom)) {\r\n            this._height = this.bottom - this.top;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The contains method determines whether a point is inside the zone.\r\n     * This method is used by the initializers and actions that\r\n     * use the zone. Usually, it need not be called directly by the user.\r\n     * \r\n     * @param x The x coordinate of the location to test for.\r\n     * @param y The y coordinate of the location to test for.\r\n     * @return true if point is inside the zone, false if it is outside.\r\n     */\r\n    public contains(x: number, y: number): boolean {\r\n        return x >= this._left && x <= this._right && y >= this._top && y <= this._bottom;\r\n    }\r\n\r\n    /**\r\n     * The getLocation method returns a random point inside the zone.\r\n     * This method is used by the initializers and actions that\r\n     * use the zone. Usually, it need not be called directly by the user.\r\n     * \r\n     * @return a random point inside the zone.\r\n     */\r\n    public getLocation(): Point {\r\n        return { x: this._left + Math.random() * this._width, y: this._top + Math.random() * this._height };\r\n    }\r\n\r\n    /**\r\n     * The getArea method returns the size of the zone.\r\n     * This method is used by the MultiZone class. Usually, \r\n     * it need not be called directly by the user.\r\n     * \r\n     * @return a random point inside the zone.\r\n     */\r\n    public getArea(): number {\r\n        return this._width * this._height;\r\n    }\r\n\r\n    /**\r\n     * Manages collisions between a particle and the zone. Particles will collide with the edges \r\n     * of the rectangle defined for this zone, from inside or outside the zone. The collisionRadius\r\n     * of the particle is used when calculating the collision.\r\n     * \r\n     * @param particle The particle to be tested for collision with the zone.\r\n     * @param bounce The coefficient of restitution for the collision.\r\n     * \r\n     * @return Whether a collision occured.\r\n     */\r\n    public collideParticle(particle: Particle, bounce = 1): boolean {\r\n        let position: number;\r\n        let previousPosition: number;\r\n        let intersect: number;\r\n        let collision = false;\r\n\r\n        if (particle.velX > 0) {\r\n            position = particle.x + particle.collisionRadius;\r\n            previousPosition = particle.previousX + particle.collisionRadius;\r\n            if (previousPosition < this._left && position >= this._left) {\r\n                intersect = particle.previousY + (particle.y - particle.previousY) * (this._left - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {\r\n                    particle.velX = -particle.velX * bounce;\r\n                    particle.x += 2 * (this._left - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n            else if (previousPosition <= this._right && position > this._right) {\r\n                intersect = particle.previousY + (particle.y - particle.previousY) * (this._right - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {\r\n                    particle.velX = -particle.velX * bounce;\r\n                    particle.x += 2 * (this._right - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n        }\r\n        else if (particle.velX < 0) {\r\n            position = particle.x - particle.collisionRadius;\r\n            previousPosition = particle.previousX - particle.collisionRadius;\r\n            if (previousPosition > this._right && position <= this._right) {\r\n                intersect = particle.previousY + (particle.y - particle.previousY) * (this._right - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {\r\n                    particle.velX = -particle.velX * bounce;\r\n                    particle.x += 2 * (this._right - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n            else if (previousPosition >= this._left && position < this._left) {\r\n                intersect = particle.previousY + (particle.y - particle.previousY) * (this._left - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {\r\n                    particle.velX = -particle.velX * bounce;\r\n                    particle.x += 2 * (this._left - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (particle.velY > 0) {\r\n            position = particle.y + particle.collisionRadius;\r\n            previousPosition = particle.previousY + particle.collisionRadius;\r\n            if (previousPosition < this._top && position >= this._top) {\r\n                intersect = particle.previousX + (particle.x - particle.previousX) * (this._top - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {\r\n                    particle.velY = -particle.velY * bounce;\r\n                    particle.y += 2 * (this._top - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n            else if (previousPosition <= this._bottom && position > this._bottom) {\r\n                intersect = particle.previousX + (particle.x - particle.previousX) * (this._bottom - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {\r\n                    particle.velY = -particle.velY * bounce;\r\n                    particle.y += 2 * (this._bottom - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n        }\r\n        else if (particle.velY < 0) {\r\n            position = particle.y - particle.collisionRadius;\r\n            previousPosition = particle.previousY - particle.collisionRadius;\r\n            if (previousPosition > this._bottom && position <= this._bottom) {\r\n                intersect = particle.previousX + (particle.x - particle.previousX) * (this._bottom - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {\r\n                    particle.velY = -particle.velY * bounce;\r\n                    particle.y += 2 * (this._bottom - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n            else if (previousPosition >= this._top && position < this._top) {\r\n                intersect = particle.previousX + (particle.x - particle.previousX) * (this._top - previousPosition) / (position - previousPosition);\r\n                if (intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {\r\n                    particle.velY = -particle.velY * bounce;\r\n                    particle.y += 2 * (this._top - position);\r\n                    collision = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return collision;\r\n    }\r\n}","/* eslint-disable no-bitwise */\r\nconst WORD_SIZE = 32;\r\n\r\nexport class KeyPoll {\r\n  private keys:Int32Array = new Int32Array(4);\r\n\r\n  public constructor() {\r\n    window.addEventListener('keyup', this.keyUpHandler);\r\n    window.addEventListener('keydown', this.keyDownHandler);\r\n  }\r\n\r\n  public isDown(key:number):boolean {\r\n    const i = Math.floor(key / WORD_SIZE);\r\n    return (this.keys[i] & (1 << key - i * WORD_SIZE)) !== 0;\r\n  }\r\n\r\n  public isUp(key:number):boolean {\r\n    return !this.isDown(key);\r\n  }\r\n\r\n  private keyDownHandler = (event:KeyboardEvent):void => {\r\n    const { keyCode } = event;\r\n    const index = Math.floor(keyCode / WORD_SIZE);\r\n    this.keys[index] |= (1 << keyCode - index * WORD_SIZE);\r\n  };\r\n\r\n  private keyUpHandler = (event:KeyboardEvent):void => {\r\n    const { keyCode } = event;\r\n    const index = Math.floor(keyCode / WORD_SIZE);\r\n    this.keys[index] &= ~(1 << keyCode - index * WORD_SIZE);\r\n  };\r\n}\r\n","export const NUMBER_0 = 48;\r\nexport const NUMBER_1 = 49;\r\nexport const NUMBER_2 = 50;\r\nexport const NUMBER_3 = 51;\r\nexport const NUMBER_4 = 52;\r\nexport const NUMBER_5 = 53;\r\nexport const NUMBER_6 = 54;\r\nexport const NUMBER_7 = 55;\r\nexport const NUMBER_8 = 56;\r\nexport const NUMBER_9 = 57;\r\nexport const A = 65;\r\nexport const B = 66;\r\nexport const C = 67;\r\nexport const D = 68;\r\nexport const E = 69;\r\nexport const F = 70;\r\nexport const G = 71;\r\nexport const H = 72;\r\nexport const I = 73;\r\nexport const J = 74;\r\nexport const K = 75;\r\nexport const L = 76;\r\nexport const M = 77;\r\nexport const N = 78;\r\nexport const O = 79;\r\nexport const P = 80;\r\nexport const Q = 81;\r\nexport const R = 82;\r\nexport const S = 83;\r\nexport const T = 84;\r\nexport const U = 85;\r\nexport const V = 86;\r\nexport const W = 87;\r\nexport const X = 88;\r\nexport const Y = 89;\r\nexport const Z = 90;\r\nexport const NUMPAD_0 = 96;\r\nexport const NUMPAD_1 = 97;\r\nexport const NUMPAD_2 = 98;\r\nexport const NUMPAD_3 = 99;\r\nexport const NUMPAD_4 = 100;\r\nexport const NUMPAD_5 = 101;\r\nexport const NUMPAD_6 = 102;\r\nexport const NUMPAD_7 = 103;\r\nexport const NUMPAD_8 = 104;\r\nexport const NUMPAD_9 = 105;\r\nexport const NUMPAD_MULTIPLY = 106;\r\nexport const NUMPAD_ADD = 107;\r\nexport const NUMPAD_ENTER = 108;\r\nexport const NUMPAD_SUBTRACT = 109;\r\nexport const NUMPAD_DECIMAL = 110;\r\nexport const NUMPAD_DIVIDE = 111;\r\nexport const F1 = 112;\r\nexport const F2 = 113;\r\nexport const F3 = 114;\r\nexport const F4 = 115;\r\nexport const F5 = 116;\r\nexport const F6 = 117;\r\nexport const F7 = 118;\r\nexport const F8 = 119;\r\nexport const F9 = 120;\r\nexport const F10 = 121; //  F10 is used by browser\r\nexport const F11 = 122;\r\nexport const F12 = 123;\r\nexport const F13 = 124;\r\nexport const F14 = 125;\r\nexport const F15 = 126;\r\nexport const BACKSPACE = 8;\r\nexport const TAB = 9;\r\nexport const ALTERNATE = 18;\r\nexport const ENTER = 13;\r\nexport const COMMAND = 15;\r\nexport const SHIFT = 16;\r\nexport const CONTROL = 17;\r\nexport const BREAK = 19;\r\nexport const CAPS_LOCK = 20;\r\nexport const NUMPAD = 21;\r\nexport const ESCAPE = 27;\r\nexport const SPACE = 32;\r\nexport const PAGE_UP = 33;\r\nexport const PAGE_DOWN = 34;\r\nexport const END = 35;\r\nexport const HOME = 36;\r\nexport const LEFT = 37;\r\nexport const RIGHT = 39;\r\nexport const UP = 38;\r\nexport const DOWN = 40;\r\nexport const INSERT = 45;\r\nexport const DELETE = 46;\r\nexport const NUMLOCK = 144;\r\nexport const SEMICOLON = 186;\r\nexport const EQUAL = 187;\r\nexport const COMMA = 188;\r\nexport const MINUS = 189;\r\nexport const PERIOD = 190;\r\nexport const SLASH = 191;\r\nexport const BACKQUOTE = 192;\r\nexport const LEFTBRACKET = 219;\r\nexport const BACKSLASH = 220;\r\nexport const RIGHTBRACKET = 221;\r\nexport const QUOTE = 222;\r\n","import ActionCallback from '@/particles/actions/ActionCallback';\r\nimport BoundingBox from '@/particles/actions/BoundingBox';\r\nimport CollisionZone from '@/particles/actions/CollisionZone';\r\nimport Move from '@/particles/actions/Move';\r\nimport SpeedLimit from '@/particles/actions/SpeedLimit';\r\nimport TurnTowardsPoint from '@/particles/actions/TurnTowardsPoint';\r\nimport ZonedAction from '@/particles/actions/ZonedAction';\r\nimport Emitter from '@/particles/emitters/Emitter';\r\nimport ParticleEvents from '@/particles/events/ParticleEvents';\r\nimport Particle2D from '@/particles/particles/Particle2D';\r\nimport CircleZone from '@/particles/zones/CircleZone';\r\nimport RectangleZone from '@/particles/zones/RectangleZone';\r\nimport { FrameTickProvider } from '@ash.ts/tick';\r\nimport Graphics from './Graphics';\r\nimport { KeyPoll } from './KeyPoll';\r\nimport * as Keyboard from './Keyboard';\r\nimport { Point } from '@/particles/zones/Zone2D';\r\n\r\nexport default class Collisions {\r\n\r\n    private emitters: Array<Emitter> = [];\r\n    public particles: Array<Particle2D> = [];\r\n    public graphices: Array<Graphics> = [];\r\n\r\n    private MAX_BOTS_COUNT = 50;\r\n    private MAX_VENUES_COUNT = 100;\r\n    private MAX_PARTICLE_DELTA_MOTION = 100;\r\n\r\n    constructor() {\r\n        this.setupEmitter();\r\n    \r\n        // const tickProvider = new FrameTickProvider();\r\n        // tickProvider.add(delta => this.update(delta));\r\n        // tickProvider.start();\r\n    }\r\n\r\n    public update(time: number) {\r\n        for (let i = 0; i < this.emitters.length; i++) {\r\n            this.emitters[i].update(time);\r\n        }\r\n    }\r\n\r\n    \r\n    private setupEmitter(): void {\r\n        // common emitter\r\n        const emitter: Emitter = new Emitter();\r\n        emitter.actions = [\r\n            new Move(),\r\n            new SpeedLimit(190, false),\r\n            new BoundingBox(10, 10, window.innerWidth - 10, window.innerHeight - 10)\r\n        ];\r\n        this.emitters.push(emitter);\r\n        this.particles  = emitter.particles;\r\n\r\n        // add Venius\r\n        this.createVenues(emitter);\r\n        this.createHero(emitter);\r\n\r\n        while (this.particles.length < this.MAX_BOTS_COUNT) {\r\n            this.createBot(emitter, this.getBotNewDestinationPoint());\r\n        }\r\n\r\n        emitter.addEventListener(ParticleEvents.BOUNDING_BOX_COLLISION, () => {\r\n            console.log('BOUNDING_BOX_COLLISION')\r\n        });\r\n    }\r\n\r\n    private createVenues(emitter: Emitter): void {\r\n        const venues: Array<Graphics> = [];\r\n        for (let i = 0; i < this.MAX_VENUES_COUNT; i++) {\r\n            const x = this.getRandom(100, window.innerWidth - 100);\r\n            const y = this.getRandom(100, window.innerHeight - 100);\r\n            const r = this.getRandom(7, 15);\r\n\r\n            // new CollisionZone(new PointZone({x: x, y: y}), 1)\r\n            // emitter.addAction(new GravityWell(1, x, y, 100));\r\n            emitter.addAction(new CollisionZone(new CircleZone({x, y}, r)))\r\n            venues.unshift(new Graphics(x, y, r))\r\n            this.graphices.push(venues[0]);\r\n        }\r\n    }\r\n\r\n    private createHero(emitter: Emitter): void {\r\n        // hero emitter\r\n        const hero: Particle2D = new Particle2D();\r\n        hero.x = 200;\r\n        hero.y = 100;\r\n        hero.velX = 0;\r\n        hero.velY = 0;\r\n        hero.collisionRadius = 5;\r\n        hero.color = '#ff0000';\r\n\r\n        emitter.addParticle(hero);\r\n\r\n        const heroEmitter: Emitter = new Emitter();\r\n        heroEmitter.addParticle(hero);\r\n        this.emitters.push(heroEmitter);\r\n\r\n        this.createHeroControlModule(heroEmitter, hero);\r\n    }\r\n\r\n    private createHeroControlModule(heroEmitter: Emitter, hero: Particle2D): void {\r\n        let pointed = false;\r\n        let keyboarded = false;\r\n\r\n        const destinationZone: RectangleZone = new RectangleZone();\r\n        const turnTowardsPoint: TurnTowardsPoint = new TurnTowardsPoint(window.innerWidth - 100, window.innerHeight - 100, 500);\r\n\r\n        const zonedAction: ZonedAction = new ZonedAction(\r\n                new ActionCallback(() => {\r\n                    // end pointed\r\n                    pointed = false;\r\n                    heroEmitter.removeAction(turnTowardsPoint);\r\n                    heroEmitter.removeAction(zonedAction);\r\n                    hero.velX = 0;\r\n                    hero.velY = 0;\r\n                }, \r\n                false\r\n            ), \r\n            destinationZone\r\n        );\r\n        \r\n        document.body.addEventListener('click', (e: MouseEvent) => {\r\n            // start pointed\r\n            pointed = true;\r\n            keyboarded = !pointed;\r\n\r\n            hero.velX = 60;\r\n            hero.velY = 60;\r\n\r\n            turnTowardsPoint.x = e.clientX;\r\n            turnTowardsPoint.y = e.clientY;\r\n            if (!heroEmitter.hasAction(turnTowardsPoint)) {\r\n                heroEmitter.addAction(turnTowardsPoint);\r\n            }\r\n\r\n            const precision = 3;\r\n            destinationZone.left = turnTowardsPoint.x - precision;\r\n            destinationZone.top = turnTowardsPoint.y - precision;\r\n            destinationZone.right = turnTowardsPoint.x + precision;\r\n            destinationZone.bottom = turnTowardsPoint.y + precision;\r\n            if (!heroEmitter.hasAction(zonedAction)) {\r\n                heroEmitter.addAction(zonedAction);\r\n            }\r\n        });\r\n\r\n        const keyPoll = new KeyPoll();\r\n        const tickProvider = new FrameTickProvider();\r\n        tickProvider.add(delta => {\r\n            let down = false;\r\n            if (keyPoll.isDown(Keyboard.W) || keyPoll.isDown(Keyboard.UP)) {\r\n                down = true;\r\n                hero.velY = -60;\r\n            } else if (keyPoll.isDown(Keyboard.S) || keyPoll.isDown(Keyboard.DOWN)) {\r\n                down = true;\r\n                hero.velY = 60;\r\n            } else if (!pointed) {\r\n                hero.velY = 0;\r\n            }\r\n            if (keyPoll.isDown(Keyboard.A) || keyPoll.isDown(Keyboard.LEFT)) {\r\n                down = true;\r\n                hero.velX = -60;\r\n            } else if (keyPoll.isDown(Keyboard.D) || keyPoll.isDown(Keyboard.RIGHT)) {\r\n                down = true;\r\n                hero.velX = 60;\r\n            } else if (!pointed) {\r\n                hero.velX = 0;\r\n            }\r\n\r\n            if (down) {\r\n                // end pointed\r\n                pointed = false;\r\n                keyboarded = !pointed;\r\n                heroEmitter.removeAction(turnTowardsPoint);\r\n                heroEmitter.removeAction(zonedAction);\r\n            } else if (keyboarded) {\r\n                keyboarded = false;\r\n                hero.velX = 0;\r\n                hero.velY = 0;\r\n            }\r\n        });\r\n        tickProvider.start();\r\n    }\r\n\r\n    private createBot(emitter: Emitter, point: Point): void {\r\n        // create particle\r\n        const hero: Particle2D = new Particle2D();\r\n        hero.x = point.x;\r\n        hero.y = point.y;\r\n        hero.collisionRadius = 5;\r\n        hero.color = '#0000cc';\r\n\r\n        // add particle to main emitter\r\n        emitter.addParticle(hero);\r\n\r\n        // create own control memitter\r\n        const destinationZone: RectangleZone = new RectangleZone();\r\n        const turnTowardsPoint: TurnTowardsPoint = new TurnTowardsPoint(0, 0, 500);\r\n        const startWalkToNextZone = () => {\r\n            hero.velX = this.getRandom(-100, 100);\r\n            hero.velY = this.getRandom(-100, 100);\r\n\r\n            const point: Point = this.getBotNewDestinationPoint()\r\n            turnTowardsPoint.x = point.x;\r\n            turnTowardsPoint.y = point.y;\r\n        \r\n            const precision = 5;\r\n            destinationZone.left = turnTowardsPoint.x - precision;\r\n            destinationZone.top = turnTowardsPoint.y - precision;\r\n            destinationZone.right = turnTowardsPoint.x + precision;\r\n            destinationZone.bottom = turnTowardsPoint.y + precision;\r\n        }\r\n        const zonedAction: ZonedAction = new ZonedAction(\r\n                new ActionCallback(() => {\r\n                    startWalkToNextZone();\r\n                }, \r\n                false\r\n            ), \r\n            destinationZone\r\n        );\r\n\r\n        const heroEmitter: Emitter = new Emitter();\r\n        heroEmitter.actions = [\r\n            turnTowardsPoint,\r\n            zonedAction\r\n        ];\r\n        heroEmitter.addParticle(hero);\r\n        this.emitters.push(heroEmitter);\r\n\r\n        // start bot\r\n        startWalkToNextZone();\r\n    }\r\n\r\n    private getBotNewDestinationPoint(): Point {\r\n        const x = this.getRandom(100, window.innerWidth - 100);\r\n        const y = this.getRandom(100, window.innerHeight - 100);\r\n        let br = false;\r\n        for (let i = 0; i < this.graphices.length; i++) {\r\n            const g: Graphics = this.graphices[i];\r\n            const r = g.radius * 1.5;\r\n            if (g.x - r < x && g.x + r > x && g.y - r < y && g.y + r > y) {\r\n                br = true;\r\n                break;\r\n            }\r\n        }\r\n        if (br) {\r\n            return this.getBotNewDestinationPoint();\r\n        } else {\r\n            return {x, y};\r\n        }\r\n    }\r\n\r\n    private createParticle(): Particle2D {\r\n        const particle: Particle2D = new Particle2D();\r\n        particle.collisionRadius = 5;\r\n        particle.color = '#705da4';\r\n        particle.x = this.getRandom(window.innerWidth * .2, window.innerWidth * .8);\r\n        particle.y = this.getRandom(window.innerHeight * .2, window.innerHeight * .8);\r\n        particle.velX = this.getRandom(-this.MAX_PARTICLE_DELTA_MOTION, this.MAX_PARTICLE_DELTA_MOTION);\r\n        particle.velY = this.getRandom(-this.MAX_PARTICLE_DELTA_MOTION, this.MAX_PARTICLE_DELTA_MOTION);\r\n        return particle;\r\n    }\r\n\r\n    private getRandom(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n}","\n\n\n\n\r\nimport { Component, Vue } from 'vue-property-decorator';\r\nimport { FrameTickProvider } from '@ash.ts/tick';\r\nimport Render from './Render.vue';\r\nimport Particle from '@/particles/particles/Particle';\r\nimport Graphics from './Graphics';\r\nimport Collisions from './Collisions1';\r\n\r\n@Component({\r\n  components: {\r\n      Render\r\n  }\r\n})\r\nexport default class Game extends Vue {\r\n\r\n    private particles: Array<Array<Particle>> = [];\r\n    private graphices: Array<Graphics> = [];\r\n\r\n    private MAX_BOTS_COUNT = 100;\r\n    private MAX_VENUES_COUNT = 500;\r\n    private MAX_PARTICLE_DELTA_MOTION = 100;\r\n\r\n    private collisions: Collisions | null = null;\r\n\r\n    mounted() {\r\n        this.setupEmitter();\r\n    \r\n        const tickProvider = new FrameTickProvider();\r\n        tickProvider.add(delta => this.update(delta));\r\n        tickProvider.start();\r\n    }\r\n\r\n    destroyed() {\r\n        console.log('Game', 'destroyed')\r\n    }\r\n\r\n    private setupEmitter(): void {\r\n        this.collisions = new Collisions();\r\n        this.particles.push(this.collisions.particles);\r\n        this.graphices = this.collisions.graphices;\r\n    }\r\n\r\n    private update(time: number): void {\r\n        this.updateCollisions(time);\r\n        this.updateRender(time);\r\n    }\r\n\r\n    private updateCollisions(time: number): void {\r\n        if (this.collisions) {\r\n            this.collisions.update(time);\r\n        }\r\n    }\r\n\r\n    private updateRender(time: number): void {\r\n        (this.$refs.render as Render).update(time);\r\n    }\r\n\r\n    \r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Game.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Game.vue?vue&type=template&id=96503880&\"\nimport script from \"./Game.vue?vue&type=script&lang=ts&\"\nexport * from \"./Game.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\n\n\n\n\n\n\nimport \"@/styles/assets.styl\";\nimport { Component, Vue } from \"vue-property-decorator\";\nimport Game from \"./Game.vue\";\n\n@Component({\n    components: {\n        Game\n    },\n})\nexport default class App extends Vue {\n    mounted() {\n        console.log(\"App mounted\");    \n    }\n}\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=17f1026c&\"\nimport script from \"./App.vue?vue&type=script&lang=ts&\"\nexport * from \"./App.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\r\nimport App from './render/App.vue'\r\nimport createFps from 'fps-indicator';\r\n\r\nVue.config.productionTip = false\r\n\r\nnew Vue({\r\n  render: h => h(App)\r\n}).$mount('#app');\r\n\r\ncreateFps({style: 'padding: 20px; color: #ffffff; text-shadow: 0 0 4px black;'});\r\n"],"sourceRoot":""}